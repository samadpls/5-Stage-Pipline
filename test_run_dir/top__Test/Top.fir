;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module pccounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, pc_4 : UInt<32>, pc_out : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc_counter.scala 12:24]
    reg <= io.addr @[pc_counter.scala 14:12]
    io.pc_out <= reg @[pc_counter.scala 15:18]
    node _io_pc_4_T = add(reg, UInt<3>("h04")) @[pc_counter.scala 16:21]
    node _io_pc_4_T_1 = tail(_io_pc_4_T, 1) @[pc_counter.scala 16:21]
    io.pc_4 <= _io_pc_4_T_1 @[pc_counter.scala 16:16]
    
  module datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Addr : UInt<8>, flip Data : SInt<32>, flip MemWrite : UInt<1>, flip MemRead : UInt<1>, out : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[datamem.scala 13:22]
    node _T = eq(io.MemWrite, UInt<1>("h01")) @[datamem.scala 14:27]
    when _T : @[datamem.scala 14:35]
      write mport MPORT = mem[io.Addr], clock
      MPORT <= io.Data
      skip @[datamem.scala 14:35]
    node _T_1 = eq(io.MemRead, UInt<1>("h01")) @[datamem.scala 17:25]
    when _T_1 : @[datamem.scala 17:33]
      read mport io_out_MPORT = mem[io.Addr], clock @[datamem.scala 18:35]
      io.out <= io_out_MPORT @[datamem.scala 18:24]
      skip @[datamem.scala 17:33]
    else : @[datamem.scala 20:20]
      io.out <= asSInt(UInt<1>("h00")) @[datamem.scala 20:28]
      skip @[datamem.scala 20:20]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<10>, inst : UInt<32>}
    
    cmem imem : UInt<32>[32] @[instmem.scala 13:20]
    node _io_inst_T = bits(io.addr, 4, 0) @[instmem.scala 15:25]
    read mport io_inst_MPORT = imem[_io_inst_T], clock @[instmem.scala 15:25]
    io.inst <= io_inst_MPORT @[instmem.scala 15:13]
    
  module reg : 
    input clock : Clock
    input reset : Reset
    output io : {flip write : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rd1 : SInt<32>, rd2 : SInt<32>}
    
    wire _register_WIRE : SInt<32>[32] @[regfile.scala 17:39]
    _register_WIRE[0] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[1] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[2] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[3] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[4] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[5] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[6] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[7] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[8] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[9] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[10] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[11] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[12] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[13] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[14] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[15] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[16] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[17] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[18] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[19] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[20] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[21] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[22] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[23] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[24] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[25] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[26] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[27] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[28] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[29] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[30] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[31] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    reg register : SInt<32>[32], clock with : (reset => (reset, _register_WIRE)) @[regfile.scala 17:31]
    register[0] <= asSInt(UInt<1>("h00")) @[regfile.scala 18:21]
    io.rd1 <= register[io.rs1] @[regfile.scala 21:16]
    io.rd2 <= register[io.rs2] @[regfile.scala 22:16]
    node _T = eq(io.write, UInt<1>("h01")) @[regfile.scala 24:23]
    when _T : @[regfile.scala 24:31]
      node _T_1 = eq(io.rd, UInt<1>("h00")) @[regfile.scala 25:28]
      when _T_1 : @[regfile.scala 25:43]
        register[io.rd] <= asSInt(UInt<1>("h00")) @[regfile.scala 26:41]
        skip @[regfile.scala 25:43]
      else : @[regfile.scala 27:28]
        register[io.rd] <= io.WriteData @[regfile.scala 28:41]
        skip @[regfile.scala 27:28]
      skip @[regfile.scala 24:31]
    
  module controler : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcod : UInt<7>, memwrite : UInt<1>, branch : UInt<1>, memread : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<1>, aluop : UInt<3>, op_a : UInt<2>, op_b : UInt<1>, extend_sel : UInt<2>, next_pc : UInt<2>}
    
    io.memwrite <= UInt<1>("h00") @[controler.scala 22:20]
    io.branch <= UInt<1>("h00") @[controler.scala 23:18]
    io.memread <= UInt<1>("h00") @[controler.scala 24:20]
    io.regwrite <= UInt<1>("h00") @[controler.scala 25:20]
    io.memtoreg <= UInt<1>("h00") @[controler.scala 26:20]
    io.aluop <= UInt<1>("h00") @[controler.scala 27:17]
    io.op_a <= UInt<1>("h00") @[controler.scala 28:16]
    io.op_b <= UInt<1>("h00") @[controler.scala 29:16]
    io.extend_sel <= UInt<1>("h00") @[controler.scala 30:22]
    io.next_pc <= UInt<1>("h00") @[controler.scala 31:19]
    node _T = eq(UInt<5>("h013"), io.opcod) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.regwrite <= UInt<1>("h01") @[controler.scala 34:20]
      io.aluop <= UInt<1>("h01") @[controler.scala 35:17]
      io.op_b <= UInt<1>("h01") @[controler.scala 36:16]
      io.memwrite <= UInt<1>("h00") @[controler.scala 37:20]
      io.branch <= UInt<1>("h00") @[controler.scala 38:18]
      io.memread <= UInt<1>("h00") @[controler.scala 39:20]
      io.memtoreg <= UInt<1>("h00") @[controler.scala 40:20]
      io.op_a <= UInt<1>("h00") @[controler.scala 41:16]
      io.extend_sel <= UInt<1>("h00") @[controler.scala 42:22]
      io.next_pc <= UInt<1>("h00") @[controler.scala 43:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h03"), io.opcod) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.regwrite <= UInt<1>("h01") @[controler.scala 46:24]
        io.memread <= UInt<1>("h01") @[controler.scala 47:23]
        io.memtoreg <= UInt<1>("h01") @[controler.scala 48:24]
        io.aluop <= UInt<3>("h04") @[controler.scala 49:21]
        io.op_b <= UInt<1>("h01") @[controler.scala 50:20]
        io.memwrite <= UInt<1>("h00") @[controler.scala 51:24]
        io.branch <= UInt<1>("h00") @[controler.scala 52:22]
        io.op_a <= UInt<1>("h00") @[controler.scala 53:20]
        io.extend_sel <= UInt<1>("h00") @[controler.scala 54:26]
        io.next_pc <= UInt<1>("h00") @[controler.scala 55:23]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<7>("h06f"), io.opcod) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.regwrite <= UInt<1>("h01") @[controler.scala 58:24]
          io.aluop <= UInt<2>("h03") @[controler.scala 59:21]
          io.op_a <= UInt<1>("h01") @[controler.scala 60:20]
          io.next_pc <= UInt<2>("h02") @[controler.scala 61:23]
          io.memwrite <= UInt<1>("h00") @[controler.scala 62:24]
          io.branch <= UInt<1>("h00") @[controler.scala 63:22]
          io.memread <= UInt<1>("h00") @[controler.scala 64:24]
          io.memtoreg <= UInt<1>("h00") @[controler.scala 65:24]
          io.op_b <= UInt<1>("h00") @[controler.scala 66:20]
          io.extend_sel <= UInt<1>("h00") @[controler.scala 67:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<7>("h067"), io.opcod) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.regwrite <= UInt<1>("h01") @[controler.scala 71:24]
            io.aluop <= UInt<2>("h03") @[controler.scala 72:21]
            io.op_a <= UInt<1>("h01") @[controler.scala 73:20]
            io.op_b <= UInt<1>("h01") @[controler.scala 74:20]
            io.next_pc <= UInt<2>("h03") @[controler.scala 75:23]
            io.memwrite <= UInt<1>("h00") @[controler.scala 76:24]
            io.branch <= UInt<1>("h00") @[controler.scala 77:22]
            io.memread <= UInt<1>("h00") @[controler.scala 78:24]
            io.memtoreg <= UInt<1>("h00") @[controler.scala 79:24]
            io.extend_sel <= UInt<1>("h00") @[controler.scala 80:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<6>("h033"), io.opcod) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.regwrite <= UInt<1>("h01") @[controler.scala 84:24]
              io.memwrite <= UInt<1>("h00") @[controler.scala 85:24]
              io.branch <= UInt<1>("h00") @[controler.scala 86:22]
              io.memread <= UInt<1>("h00") @[controler.scala 87:24]
              io.memtoreg <= UInt<1>("h00") @[controler.scala 88:24]
              io.aluop <= UInt<1>("h00") @[controler.scala 89:21]
              io.op_a <= UInt<1>("h00") @[controler.scala 90:20]
              io.op_b <= UInt<1>("h00") @[controler.scala 91:20]
              io.extend_sel <= UInt<1>("h00") @[controler.scala 92:26]
              io.next_pc <= UInt<1>("h00") @[controler.scala 93:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<6>("h023"), io.opcod) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.memwrite <= UInt<1>("h01") @[controler.scala 96:24]
                io.regwrite <= UInt<1>("h01") @[controler.scala 97:24]
                io.aluop <= UInt<3>("h05") @[controler.scala 98:21]
                io.op_b <= UInt<1>("h01") @[controler.scala 99:20]
                io.extend_sel <= UInt<1>("h01") @[controler.scala 100:26]
                io.memwrite <= UInt<1>("h00") @[controler.scala 101:24]
                io.branch <= UInt<1>("h00") @[controler.scala 102:22]
                io.memread <= UInt<1>("h00") @[controler.scala 103:24]
                io.memtoreg <= UInt<1>("h00") @[controler.scala 104:24]
                io.op_a <= UInt<1>("h00") @[controler.scala 105:20]
                io.next_pc <= UInt<1>("h00") @[controler.scala 106:23]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h063"), io.opcod) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.branch <= UInt<1>("h01") @[controler.scala 110:22]
                  io.aluop <= UInt<2>("h02") @[controler.scala 111:21]
                  io.next_pc <= UInt<1>("h01") @[controler.scala 112:23]
                  io.memwrite <= UInt<1>("h00") @[controler.scala 113:24]
                  io.memread <= UInt<1>("h00") @[controler.scala 114:24]
                  io.regwrite <= UInt<1>("h00") @[controler.scala 115:24]
                  io.memtoreg <= UInt<1>("h00") @[controler.scala 116:24]
                  io.op_a <= UInt<1>("h00") @[controler.scala 117:20]
                  io.op_b <= UInt<1>("h00") @[controler.scala 118:20]
                  io.extend_sel <= UInt<1>("h00") @[controler.scala 119:26]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), io.opcod) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.regwrite <= UInt<1>("h01") @[controler.scala 123:24]
                    io.aluop <= UInt<3>("h06") @[controler.scala 124:21]
                    io.op_a <= UInt<2>("h02") @[controler.scala 125:20]
                    io.op_b <= UInt<1>("h01") @[controler.scala 126:20]
                    io.next_pc <= UInt<1>("h00") @[controler.scala 127:23]
                    io.extend_sel <= UInt<2>("h02") @[controler.scala 128:26]
                    io.memwrite <= UInt<1>("h00") @[controler.scala 129:24]
                    io.branch <= UInt<1>("h00") @[controler.scala 130:22]
                    io.memread <= UInt<1>("h00") @[controler.scala 131:24]
                    io.memtoreg <= UInt<1>("h00") @[controler.scala 132:24]
                    skip @[Conditional.scala 39:67]
    
  module ALU4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_Op : UInt<5>, flip in1 : SInt<32>, flip in2 : SInt<32>, out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[alu.scala 15:11]
    node _T = eq(UInt<1>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_out_T = add(io.in1, io.in2) @[alu.scala 17:39]
      node _io_out_T_1 = tail(_io_out_T, 1) @[alu.scala 17:39]
      node _io_out_T_2 = asSInt(_io_out_T_1) @[alu.scala 17:39]
      io.out <= _io_out_T_2 @[alu.scala 17:31]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_out_T_3 = bits(io.in2, 4, 0) @[alu.scala 18:46]
        node _io_out_T_4 = dshl(io.in1, _io_out_T_3) @[alu.scala 18:38]
        io.out <= _io_out_T_4 @[alu.scala 18:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = lt(io.in1, io.in2) @[alu.scala 20:24]
          when _T_3 : @[alu.scala 21:13]
            io.out <= asSInt(UInt<2>("h01")) @[alu.scala 21:20]
            skip @[alu.scala 21:13]
          else : @[alu.scala 21:36]
            io.out <= asSInt(UInt<1>("h00")) @[alu.scala 22:23]
            skip @[alu.scala 21:36]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<2>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _T_5 = asUInt(io.in1) @[alu.scala 24:25]
            node _T_6 = asUInt(io.in2) @[alu.scala 24:39]
            node _T_7 = lt(_T_5, _T_6) @[alu.scala 24:31]
            when _T_7 : @[alu.scala 24:46]
              io.out <= asSInt(UInt<2>("h01")) @[alu.scala 24:53]
              skip @[alu.scala 24:46]
            else : @[alu.scala 24:69]
              io.out <= asSInt(UInt<1>("h00")) @[alu.scala 24:76]
              skip @[alu.scala 24:69]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_8 = eq(UInt<5>("h016"), io.alu_Op) @[Conditional.scala 37:30]
            when _T_8 : @[Conditional.scala 39:67]
              node _T_9 = asUInt(io.in1) @[alu.scala 27:25]
              node _T_10 = asUInt(io.in2) @[alu.scala 27:39]
              node _T_11 = lt(_T_9, _T_10) @[alu.scala 27:31]
              when _T_11 : @[alu.scala 27:46]
                io.out <= asSInt(UInt<2>("h01")) @[alu.scala 27:53]
                skip @[alu.scala 27:46]
              else : @[alu.scala 27:69]
                io.out <= asSInt(UInt<1>("h00")) @[alu.scala 27:76]
                skip @[alu.scala 27:69]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_12 = eq(UInt<3>("h04"), io.alu_Op) @[Conditional.scala 37:30]
              when _T_12 : @[Conditional.scala 39:67]
                node _io_out_T_5 = xor(io.in1, io.in2) @[alu.scala 29:39]
                node _io_out_T_6 = asSInt(_io_out_T_5) @[alu.scala 29:39]
                io.out <= _io_out_T_6 @[alu.scala 29:30]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_13 = eq(UInt<3>("h05"), io.alu_Op) @[Conditional.scala 37:30]
                when _T_13 : @[Conditional.scala 39:67]
                  node _io_out_T_7 = asUInt(io.in1) @[alu.scala 30:40]
                  node _io_out_T_8 = bits(io.in2, 4, 0) @[alu.scala 30:54]
                  node _io_out_T_9 = dshr(_io_out_T_7, _io_out_T_8) @[alu.scala 30:46]
                  node _io_out_T_10 = asSInt(_io_out_T_9) @[alu.scala 30:68]
                  io.out <= _io_out_T_10 @[alu.scala 30:30]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_14 = eq(UInt<3>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                  when _T_14 : @[Conditional.scala 39:67]
                    node _io_out_T_11 = or(io.in1, io.in2) @[alu.scala 31:38]
                    node _io_out_T_12 = asSInt(_io_out_T_11) @[alu.scala 31:38]
                    io.out <= _io_out_T_12 @[alu.scala 31:30]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_15 = eq(UInt<3>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_15 : @[Conditional.scala 39:67]
                      node _io_out_T_13 = and(io.in1, io.in2) @[alu.scala 32:39]
                      node _io_out_T_14 = asSInt(_io_out_T_13) @[alu.scala 32:39]
                      io.out <= _io_out_T_14 @[alu.scala 32:30]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_16 = eq(UInt<4>("h08"), io.alu_Op) @[Conditional.scala 37:30]
                      when _T_16 : @[Conditional.scala 39:67]
                        node _io_out_T_15 = sub(io.in1, io.in2) @[alu.scala 33:39]
                        node _io_out_T_16 = tail(_io_out_T_15, 1) @[alu.scala 33:39]
                        node _io_out_T_17 = asSInt(_io_out_T_16) @[alu.scala 33:39]
                        io.out <= _io_out_T_17 @[alu.scala 33:30]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_17 = eq(UInt<4>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                        when _T_17 : @[Conditional.scala 39:67]
                          node _io_out_T_18 = asUInt(io.in1) @[alu.scala 34:40]
                          node _io_out_T_19 = bits(io.in2, 4, 0) @[alu.scala 34:54]
                          node _io_out_T_20 = dshr(_io_out_T_18, _io_out_T_19) @[alu.scala 34:46]
                          node _io_out_T_21 = asSInt(_io_out_T_20) @[alu.scala 34:68]
                          io.out <= _io_out_T_21 @[alu.scala 34:30]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_18 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                          when _T_18 : @[Conditional.scala 39:67]
                            io.out <= io.in1 @[alu.scala 35:30]
                            skip @[Conditional.scala 39:67]
    
  module BranchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_opp : UInt<5>, flip branch : UInt<1>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, br_taken : UInt<1>}
    
    wire xy : UInt<1> @[branch.scala 13:16]
    xy <= UInt<1>("h00") @[branch.scala 14:7]
    node _T = eq(UInt<5>("h010"), io.alu_opp) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _xy_T = eq(io.arg_x, io.arg_y) @[branch.scala 17:33]
      xy <= _xy_T @[branch.scala 17:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<5>("h013"), io.alu_opp) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _xy_T_1 = neq(io.arg_x, io.arg_y) @[branch.scala 18:33]
        xy <= _xy_T_1 @[branch.scala 18:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<5>("h014"), io.alu_opp) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _xy_T_2 = lt(io.arg_x, io.arg_y) @[branch.scala 19:32]
          xy <= _xy_T_2 @[branch.scala 19:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<5>("h015"), io.alu_opp) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _xy_T_3 = gt(io.arg_x, io.arg_y) @[branch.scala 20:32]
            xy <= _xy_T_3 @[branch.scala 20:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<5>("h016"), io.alu_opp) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _xy_T_4 = lt(io.arg_x, io.arg_y) @[branch.scala 21:32]
              xy <= _xy_T_4 @[branch.scala 21:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<5>("h017"), io.alu_opp) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _xy_T_5 = geq(io.arg_x, io.arg_y) @[branch.scala 22:32]
                xy <= _xy_T_5 @[branch.scala 22:22]
                skip @[Conditional.scala 39:67]
    node _io_br_taken_T = and(xy, io.branch) @[branch.scala 24:17]
    io.br_taken <= _io_br_taken_T @[branch.scala 24:12]
    
  module ImmdValGen1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc_val : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>}
    
    node s_imm13_hi = bits(io.instr, 31, 25) @[imme.scala 21:36]
    node s_imm13_lo = bits(io.instr, 11, 7) @[imme.scala 21:52]
    node s_imm13 = cat(s_imm13_hi, s_imm13_lo) @[Cat.scala 30:58]
    node _io_s_imm_T = bits(s_imm13, 11, 11) @[imme.scala 22:41]
    node _io_s_imm_T_1 = bits(_io_s_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_s_imm_hi = mux(_io_s_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _io_s_imm_T_2 = cat(io_s_imm_hi, s_imm13) @[Cat.scala 30:58]
    node _io_s_imm_T_3 = asSInt(_io_s_imm_T_2) @[imme.scala 22:57]
    io.s_imm <= _io_s_imm_T_3 @[imme.scala 22:18]
    node sb_imm13_hi_hi_hi = bits(io.instr, 31, 31) @[imme.scala 24:37]
    node sb_imm13_hi_hi_lo = bits(io.instr, 7, 7) @[imme.scala 24:50]
    node sb_imm13_hi_lo = bits(io.instr, 30, 25) @[imme.scala 24:62]
    node sb_imm13_lo_hi = bits(io.instr, 11, 8) @[imme.scala 24:78]
    node sb_imm13_lo = cat(sb_imm13_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sb_imm13_hi_hi = cat(sb_imm13_hi_hi_hi, sb_imm13_hi_hi_lo) @[Cat.scala 30:58]
    node sb_imm13_hi = cat(sb_imm13_hi_hi, sb_imm13_hi_lo) @[Cat.scala 30:58]
    node sb_imm13 = cat(sb_imm13_hi, sb_imm13_lo) @[Cat.scala 30:58]
    node _io_sb_imm_T = bits(sb_imm13, 12, 12) @[imme.scala 25:44]
    node _io_sb_imm_T_1 = bits(_io_sb_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_sb_imm_hi = mux(_io_sb_imm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _io_sb_imm_T_2 = cat(io_sb_imm_hi, sb_imm13) @[Cat.scala 30:58]
    node _io_sb_imm_T_3 = add(_io_sb_imm_T_2, io.pc_val) @[imme.scala 25:61]
    node _io_sb_imm_T_4 = tail(_io_sb_imm_T_3, 1) @[imme.scala 25:61]
    node _io_sb_imm_T_5 = asSInt(_io_sb_imm_T_4) @[imme.scala 25:74]
    io.sb_imm <= _io_sb_imm_T_5 @[imme.scala 25:19]
    node uj_imm21_hi_hi_hi = bits(io.instr, 31, 31) @[imme.scala 27:37]
    node uj_imm21_hi_hi_lo = bits(io.instr, 19, 12) @[imme.scala 27:50]
    node uj_imm21_hi_lo = bits(io.instr, 20, 20) @[imme.scala 27:66]
    node uj_imm21_lo_hi = bits(io.instr, 30, 21) @[imme.scala 27:79]
    node uj_imm21_lo = cat(uj_imm21_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node uj_imm21_hi_hi = cat(uj_imm21_hi_hi_hi, uj_imm21_hi_hi_lo) @[Cat.scala 30:58]
    node uj_imm21_hi = cat(uj_imm21_hi_hi, uj_imm21_hi_lo) @[Cat.scala 30:58]
    node uj_imm21 = cat(uj_imm21_hi, uj_imm21_lo) @[Cat.scala 30:58]
    node _io_uj_imm_T = bits(uj_imm21, 20, 20) @[imme.scala 28:44]
    node _io_uj_imm_T_1 = bits(_io_uj_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_uj_imm_hi = mux(_io_uj_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_uj_imm_T_2 = cat(io_uj_imm_hi, uj_imm21) @[Cat.scala 30:58]
    node _io_uj_imm_T_3 = add(_io_uj_imm_T_2, io.pc_val) @[imme.scala 28:61]
    node _io_uj_imm_T_4 = tail(_io_uj_imm_T_3, 1) @[imme.scala 28:61]
    node _io_uj_imm_T_5 = asSInt(_io_uj_imm_T_4) @[imme.scala 28:74]
    io.uj_imm <= _io_uj_imm_T_5 @[imme.scala 28:19]
    node _io_u_imm_T = bits(io.instr, 31, 31) @[imme.scala 30:43]
    node _io_u_imm_T_1 = bits(_io_u_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_u_imm_hi = mux(_io_u_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node io_u_imm_lo = bits(io.instr, 31, 12) @[imme.scala 30:57]
    node _io_u_imm_T_2 = cat(io_u_imm_hi, io_u_imm_lo) @[Cat.scala 30:58]
    node _io_u_imm_T_3 = shl(_io_u_imm_T_2, 12) @[imme.scala 30:67]
    node _io_u_imm_T_4 = asSInt(_io_u_imm_T_3) @[imme.scala 30:74]
    io.u_imm <= _io_u_imm_T_4 @[imme.scala 30:18]
    node _io_i_imm_T = bits(io.instr, 31, 31) @[imme.scala 32:42]
    node _io_i_imm_T_1 = bits(_io_i_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_i_imm_hi = mux(_io_i_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_i_imm_lo = bits(io.instr, 31, 20) @[imme.scala 32:56]
    node _io_i_imm_T_2 = cat(io_i_imm_hi, io_i_imm_lo) @[Cat.scala 30:58]
    node _io_i_imm_T_3 = asSInt(_io_i_imm_T_2) @[imme.scala 32:66]
    io.i_imm <= _io_i_imm_T_3 @[imme.scala 32:18]
    
  module jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : SInt<32>, flip pc_addr : SInt<32>, out : SInt<32>}
    
    node _io_out_T = add(io.addr, io.pc_addr) @[jalr.scala 11:22]
    node _io_out_T_1 = tail(_io_out_T, 1) @[jalr.scala 11:22]
    node _io_out_T_2 = asSInt(_io_out_T_1) @[jalr.scala 11:22]
    node _io_out_T_3 = and(_io_out_T_2, asSInt(UInt<33>("h0fffffffe"))) @[jalr.scala 11:35]
    node _io_out_T_4 = asSInt(_io_out_T_3) @[jalr.scala 11:35]
    io.out <= _io_out_T_4 @[jalr.scala 11:11]
    
  module alu_controler : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_op : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<1>, x : UInt<5>}
    
    io.x <= UInt<1>("h00") @[alu_controler.scala 13:9]
    node _T = eq(UInt<1>("h01"), io.alu_op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_x_T = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
      io.x <= _io_x_T @[alu_controler.scala 16:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h00"), io.alu_op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node io_x_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
        node _io_x_T_1 = cat(io_x_hi, io.func3) @[Cat.scala 30:58]
        io.x <= _io_x_T_1 @[alu_controler.scala 19:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.alu_op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node io_x_hi_1 = bits(io.alu_op, 1, 0) @[alu_controler.scala 22:32]
          node _io_x_T_2 = cat(io_x_hi_1, io.func3) @[Cat.scala 30:58]
          io.x <= _io_x_T_2 @[alu_controler.scala 22:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.alu_op) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _io_x_T_3 = mux(UInt<1>("h01"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
            io.x <= _io_x_T_3 @[alu_controler.scala 25:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h05"), io.alu_op) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _io_x_T_4 = mux(UInt<1>("h00"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
              io.x <= _io_x_T_4 @[alu_controler.scala 28:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h04"), io.alu_op) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _io_x_T_5 = mux(UInt<1>("h00"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
                io.x <= _io_x_T_5 @[alu_controler.scala 31:17]
                skip @[Conditional.scala 39:67]
    
  module Inst_fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip ins_in : UInt<32>, pc_out : UInt<32>, ins_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF.scala 24:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF.scala 25:30]
    reg reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF.scala 26:30]
    reg_pc <= io.pc_in @[IF.scala 28:16]
    reg_pc4 <= io.pc4_in @[IF.scala 29:17]
    reg_ins <= io.ins_in @[IF.scala 30:17]
    io.pc_out <= reg_pc @[IF.scala 32:19]
    io.pc4_out <= reg_pc4 @[IF.scala 33:20]
    io.ins_out <= reg_ins @[IF.scala 34:20]
    
  module ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip operandA_in : SInt<32>, flip operandB_in : SInt<32>, flip rd_in : UInt<5>, flip aluCtrl_in : UInt<5>, flip regWrite_in : UInt<1>, flip rs1Ins_in : UInt<5>, flip rs2Ins_in : UInt<5>, flip operandAsel_in : UInt<2>, flip operandBsel_in : UInt<1>, flip pc_in : UInt<32>, flip pc4_in : UInt<32>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, operandA_out : SInt<32>, operandB_out : SInt<32>, rd_out : UInt<5>, aluCtrl_out : UInt<5>, regWrite_out : UInt<1>, rs1Ins_out : UInt<5>, rs2Ins_out : UInt<5>, operandAsel_out : UInt<2>, operandBsel_out : UInt<1>, pc_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 43:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 44:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 45:35]
    reg reg_operandA : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID.scala 46:35]
    reg reg_operandB : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID.scala 47:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID.scala 48:29]
    reg reg_aluCtrl : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID.scala 50:34]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 51:35]
    reg reg_rs1Ins : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID.scala 52:33]
    reg reg_rs2Ins : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID.scala 53:33]
    reg reg_operandAsel : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID.scala 54:38]
    reg reg_operandBsel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 55:38]
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID.scala 57:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID.scala 58:30]
    reg_memWrite <= io.memWrite_in @[ID.scala 61:22]
    reg_memRead <= io.memRead_in @[ID.scala 62:21]
    reg_memToReg <= io.memToReg_in @[ID.scala 63:22]
    reg_operandA <= io.operandA_in @[ID.scala 64:22]
    reg_operandB <= io.operandB_in @[ID.scala 65:22]
    reg_rd <= io.rd_in @[ID.scala 66:16]
    reg_aluCtrl <= io.aluCtrl_in @[ID.scala 68:21]
    reg_regWrite <= io.regWrite_in @[ID.scala 69:22]
    reg_rs1Ins <= io.rs1Ins_in @[ID.scala 70:20]
    reg_rs2Ins <= io.rs2Ins_in @[ID.scala 71:20]
    reg_operandAsel <= io.operandAsel_in @[ID.scala 72:25]
    reg_operandBsel <= io.operandBsel_in @[ID.scala 73:25]
    reg_pc <= io.pc_in @[ID.scala 75:16]
    reg_pc4 <= io.pc4_in @[ID.scala 76:17]
    io.memWrite_out <= reg_memWrite @[ID.scala 79:25]
    io.memRead_out <= reg_memRead @[ID.scala 80:24]
    io.memToReg_out <= reg_memToReg @[ID.scala 81:25]
    io.operandA_out <= reg_operandA @[ID.scala 82:25]
    io.operandB_out <= reg_operandB @[ID.scala 83:25]
    io.rd_out <= reg_rd @[ID.scala 84:19]
    io.aluCtrl_out <= reg_aluCtrl @[ID.scala 86:24]
    io.regWrite_out <= reg_regWrite @[ID.scala 87:25]
    io.rs1Ins_out <= reg_rs1Ins @[ID.scala 88:23]
    io.rs2Ins_out <= reg_rs2Ins @[ID.scala 89:23]
    io.operandAsel_out <= reg_operandAsel @[ID.scala 90:28]
    io.operandBsel_out <= reg_operandBsel @[ID.scala 91:28]
    io.pc_out <= reg_pc @[ID.scala 93:19]
    io.pc4_out <= reg_pc4 @[ID.scala 94:20]
    
  module EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip aluOutput_in : SInt<32>, flip regWrite_in : UInt<1>, flip rs2Sel_in : UInt<5>, flip baseReg_in : SInt<32>, flip offSet_in : SInt<32>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>, rs2Sel_out : UInt<5>, baseReg_out : SInt<32>, offSet_out : SInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 29:31]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 30:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 31:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX.scala 32:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 33:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 34:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 35:35]
    reg reg_rs2Sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX.scala 36:33]
    reg reg_baseReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 37:34]
    reg reg_offSet : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 38:33]
    reg_memWrite <= io.memWrite_in @[EX.scala 40:22]
    reg_memRead <= io.memRead_in @[EX.scala 41:21]
    reg_memToReg <= io.memToReg_in @[EX.scala 42:22]
    reg_rd <= io.rd_in @[EX.scala 43:16]
    reg_aluOutput <= io.aluOutput_in @[EX.scala 45:23]
    reg_regWrite <= io.regWrite_in @[EX.scala 46:22]
    reg_rs2Sel <= io.rs2Sel_in @[EX.scala 47:20]
    reg_baseReg <= io.baseReg_in @[EX.scala 48:21]
    reg_offSet <= io.offSet_in @[EX.scala 49:20]
    io.memWrite_out <= reg_memWrite @[EX.scala 51:21]
    io.memRead_out <= reg_memRead @[EX.scala 52:24]
    io.memToReg_out <= reg_memToReg @[EX.scala 53:25]
    io.rd_out <= reg_rd @[EX.scala 54:19]
    io.aluOutput_out <= reg_aluOutput @[EX.scala 56:26]
    io.regWrite_out <= reg_regWrite @[EX.scala 57:25]
    io.rs2Sel_out <= reg_rs2Sel @[EX.scala 58:23]
    io.baseReg_out <= reg_baseReg @[EX.scala 59:24]
    io.offSet_out <= reg_offSet @[EX.scala 60:23]
    
  module MEM_WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip dataOut_in : SInt<32>, flip aluOutput_in : SInt<32>, flip regWrite_in : UInt<1>, flip rs2Sel_in : UInt<5>, flip baseReg_in : SInt<32>, flip offSet_in : SInt<32>, flip MemRead_in : UInt<1>, flip memWrite_in : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, dataOut_out : SInt<32>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>, rs2Sel_out : UInt<5>, baseReg_out : SInt<32>, offSet_out : SInt<32>, MemRead_out : UInt<1>, memWrite_out : UInt<1>}
    
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 37:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem_WB.scala 38:29]
    reg reg_dataOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 39:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 40:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 41:35]
    reg reg_rs2Sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem_WB.scala 42:33]
    reg reg_baseReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 43:34]
    reg reg_offSet : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 44:33]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 45:34]
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 46:35]
    reg_memToReg <= io.memToReg_in @[Mem_WB.scala 49:22]
    reg_rd <= io.rd_in @[Mem_WB.scala 50:16]
    reg_dataOut <= io.dataOut_in @[Mem_WB.scala 51:21]
    reg_aluOutput <= io.aluOutput_in @[Mem_WB.scala 52:23]
    reg_regWrite <= io.regWrite_in @[Mem_WB.scala 53:22]
    reg_rs2Sel <= io.rs2Sel_in @[Mem_WB.scala 54:20]
    reg_baseReg <= io.baseReg_in @[Mem_WB.scala 55:21]
    reg_offSet <= io.offSet_in @[Mem_WB.scala 56:20]
    reg_memRead <= io.MemRead_in @[Mem_WB.scala 57:21]
    reg_memWrite <= io.memWrite_in @[Mem_WB.scala 58:22]
    io.memToReg_out <= reg_memToReg @[Mem_WB.scala 61:25]
    io.rd_out <= reg_rd @[Mem_WB.scala 62:19]
    io.dataOut_out <= reg_dataOut @[Mem_WB.scala 63:24]
    io.aluOutput_out <= reg_aluOutput @[Mem_WB.scala 64:26]
    io.regWrite_out <= reg_regWrite @[Mem_WB.scala 65:25]
    io.rs2Sel_out <= reg_rs2Sel @[Mem_WB.scala 66:23]
    io.baseReg_out <= reg_baseReg @[Mem_WB.scala 67:24]
    io.offSet_out <= reg_offSet @[Mem_WB.scala 68:23]
    io.MemRead_out <= reg_memRead @[Mem_WB.scala 69:24]
    io.memWrite_out <= reg_memWrite @[Mem_WB.scala 70:25]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>, addr : UInt<10>}
    
    io.out <= UInt<1>("h00") @[top.scala 14:11]
    inst pc of pccounter @[top.scala 16:18]
    pc.clock <= clock
    pc.reset <= reset
    inst data_mem of datamem @[top.scala 17:24]
    data_mem.clock <= clock
    data_mem.reset <= reset
    inst inst_mem of InstMem @[top.scala 18:25]
    inst_mem.clock <= clock
    inst_mem.reset <= reset
    inst reg_file of reg @[top.scala 19:24]
    reg_file.clock <= clock
    reg_file.reset <= reset
    inst controler of controler @[top.scala 20:27]
    controler.clock <= clock
    controler.reset <= reset
    inst alu of ALU4 @[top.scala 21:20]
    alu.clock <= clock
    alu.reset <= reset
    inst branch of BranchControl @[top.scala 22:24]
    branch.clock <= clock
    branch.reset <= reset
    inst imm of ImmdValGen1 @[top.scala 23:20]
    imm.clock <= clock
    imm.reset <= reset
    inst Jalr of jalr @[top.scala 24:22]
    Jalr.clock <= clock
    Jalr.reset <= reset
    inst alu_cnt of alu_controler @[top.scala 25:24]
    alu_cnt.clock <= clock
    alu_cnt.reset <= reset
    inst IF of Inst_fetch @[top.scala 28:18]
    IF.clock <= clock
    IF.reset <= reset
    inst ID of ID @[top.scala 29:19]
    ID.clock <= clock
    ID.reset <= reset
    inst EX of EX @[top.scala 30:19]
    EX.clock <= clock
    EX.reset <= reset
    inst Mem_wb of MEM_WB @[top.scala 31:22]
    Mem_wb.clock <= clock
    Mem_wb.reset <= reset
    node _inst_mem_io_addr_T = bits(pc.io.pc_out, 11, 2) @[top.scala 34:35]
    inst_mem.io.addr <= _inst_mem_io_addr_T @[top.scala 34:21]
    io.addr <= inst_mem.io.addr @[top.scala 35:12]
    IF.io.pc_in <= pc.io.pc_out @[top.scala 37:16]
    IF.io.pc4_in <= pc.io.pc_4 @[top.scala 38:17]
    IF.io.ins_in <= inst_mem.io.inst @[top.scala 39:17]
    pc.io.addr <= pc.io.pc_4 @[top.scala 40:15]
    node _reg_file_io_rs1_T = bits(IF.io.ins_out, 19, 15) @[top.scala 41:35]
    reg_file.io.rs1 <= _reg_file_io_rs1_T @[top.scala 41:20]
    node _reg_file_io_rs2_T = bits(IF.io.ins_out, 24, 20) @[top.scala 42:35]
    reg_file.io.rs2 <= _reg_file_io_rs2_T @[top.scala 42:20]
    node _controler_io_opcod_T = bits(IF.io.ins_out, 6, 0) @[top.scala 45:38]
    controler.io.opcod <= _controler_io_opcod_T @[top.scala 45:23]
    ID.io.pc_in <= IF.io.pc_out @[top.scala 46:16]
    ID.io.pc4_in <= IF.io.pc4_out @[top.scala 47:17]
    node _ID_io_rd_in_T = bits(IF.io.ins_out, 11, 7) @[top.scala 48:31]
    ID.io.rd_in <= _ID_io_rd_in_T @[top.scala 48:16]
    node _ID_io_rs1Ins_in_T = bits(IF.io.ins_out, 19, 15) @[top.scala 49:35]
    ID.io.rs1Ins_in <= _ID_io_rs1Ins_in_T @[top.scala 49:20]
    node _ID_io_rs2Ins_in_T = bits(IF.io.ins_out, 24, 20) @[top.scala 50:35]
    ID.io.rs2Ins_in <= _ID_io_rs2Ins_in_T @[top.scala 50:20]
    alu_cnt.io.alu_op <= controler.io.aluop @[top.scala 53:22]
    reg func3 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[top.scala 54:22]
    node _func3_T = bits(IF.io.ins_out, 14, 12) @[top.scala 55:25]
    func3 <= _func3_T @[top.scala 55:10]
    reg func7 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[top.scala 56:23]
    node _func7_T = bits(IF.io.ins_out, 30, 30) @[top.scala 57:25]
    func7 <= _func7_T @[top.scala 57:10]
    imm.io.instr <= IF.io.ins_out @[top.scala 63:17]
    imm.io.pc_val <= IF.io.pc_out @[top.scala 64:18]
    ID.io.memWrite_in <= controler.io.memwrite @[top.scala 67:22]
    ID.io.memRead_in <= controler.io.memread @[top.scala 68:21]
    ID.io.memToReg_in <= controler.io.memtoreg @[top.scala 69:22]
    branch.io.branch <= controler.io.branch @[top.scala 70:21]
    ID.io.regWrite_in <= controler.io.regwrite @[top.scala 71:22]
    node _ID_io_operandA_in_T = asSInt(controler.io.op_a) @[top.scala 72:42]
    ID.io.operandA_in <= _ID_io_operandA_in_T @[top.scala 72:22]
    node _ID_io_operandB_in_T = asSInt(controler.io.op_b) @[top.scala 73:42]
    ID.io.operandB_in <= _ID_io_operandB_in_T @[top.scala 73:22]
    ID.io.aluCtrl_in <= alu_cnt.io.x @[top.scala 76:21]
    node _ID_io_operandAsel_in_T = asUInt(reg_file.io.rd1) @[top.scala 77:43]
    ID.io.operandAsel_in <= _ID_io_operandAsel_in_T @[top.scala 77:25]
    node _ID_io_operandBsel_in_T = asUInt(reg_file.io.rd2) @[top.scala 78:43]
    ID.io.operandBsel_in <= _ID_io_operandBsel_in_T @[top.scala 78:25]
    reg_file.io.write <= Mem_wb.io.regWrite_out @[top.scala 82:22]
    reg_file.io.rd <= Mem_wb.io.rd_out @[top.scala 83:19]
    reg_file.io.rs1 <= ID.io.rs1Ins_out @[top.scala 84:20]
    reg_file.io.rs2 <= ID.io.rs2Ins_out @[top.scala 85:20]
    imm.io.instr <= IF.io.ins_out @[top.scala 90:17]
    imm.io.pc_val <= IF.io.pc_out @[top.scala 91:18]
    node _alu_io_in1_T = asUInt(ID.io.operandA_out) @[top.scala 94:37]
    node _alu_io_in1_T_1 = eq(_alu_io_in1_T, UInt<1>("h00")) @[top.scala 94:43]
    node _alu_io_in1_T_2 = asUInt(ID.io.operandA_out) @[top.scala 94:77]
    node _alu_io_in1_T_3 = eq(_alu_io_in1_T_2, UInt<2>("h03")) @[top.scala 94:83]
    node _alu_io_in1_T_4 = or(_alu_io_in1_T_1, _alu_io_in1_T_3) @[top.scala 94:56]
    node _alu_io_in1_T_5 = asUInt(ID.io.operandA_out) @[top.scala 95:37]
    node _alu_io_in1_T_6 = eq(_alu_io_in1_T_5, UInt<1>("h01")) @[top.scala 95:43]
    node _alu_io_in1_T_7 = asSInt(ID.io.pc4_out) @[top.scala 95:74]
    node _alu_io_in1_T_8 = asUInt(ID.io.operandA_out) @[top.scala 96:37]
    node _alu_io_in1_T_9 = eq(_alu_io_in1_T_8, UInt<2>("h02")) @[top.scala 96:43]
    node _alu_io_in1_T_10 = asSInt(ID.io.pc_out) @[top.scala 96:73]
    node _alu_io_in1_T_11 = mux(_alu_io_in1_T_9, _alu_io_in1_T_10, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _alu_io_in1_T_12 = mux(_alu_io_in1_T_6, _alu_io_in1_T_7, _alu_io_in1_T_11) @[Mux.scala 98:16]
    node _alu_io_in1_T_13 = mux(_alu_io_in1_T_4, reg_file.io.rd1, _alu_io_in1_T_12) @[Mux.scala 98:16]
    alu.io.in1 <= _alu_io_in1_T_13 @[top.scala 93:15]
    node _mux_imm_T = eq(UInt<1>("h01"), controler.io.extend_sel) @[Mux.scala 80:60]
    node _mux_imm_T_1 = mux(_mux_imm_T, imm.io.s_imm, imm.io.i_imm) @[Mux.scala 80:57]
    node _mux_imm_T_2 = eq(UInt<2>("h02"), controler.io.extend_sel) @[Mux.scala 80:60]
    node _mux_imm_T_3 = mux(_mux_imm_T_2, imm.io.u_imm, _mux_imm_T_1) @[Mux.scala 80:57]
    node _mux_imm_T_4 = eq(UInt<2>("h03"), controler.io.extend_sel) @[Mux.scala 80:60]
    node mux_imm = mux(_mux_imm_T_4, reg_file.io.rd2, _mux_imm_T_3) @[Mux.scala 80:57]
    node mux2_alu = mux(controler.io.op_b, mux_imm, reg_file.io.rd2) @[top.scala 107:23]
    reg immreg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[top.scala 108:23]
    node _alu_io_in1_T_14 = asSInt(ID.io.rs1Ins_out) @[top.scala 111:34]
    alu.io.in1 <= _alu_io_in1_T_14 @[top.scala 111:15]
    node _T = eq(ID.io.operandBsel_out, UInt<1>("h01")) @[top.scala 112:32]
    when _T : @[top.scala 112:44]
      alu.io.in2 <= immreg @[top.scala 113:16]
      skip @[top.scala 112:44]
    else : @[top.scala 114:18]
      node _alu_io_in2_T = asSInt(ID.io.rs2Ins_out) @[top.scala 115:36]
      alu.io.in2 <= _alu_io_in2_T @[top.scala 115:16]
      skip @[top.scala 114:18]
    alu.io.alu_Op <= ID.io.aluCtrl_out @[top.scala 118:18]
    alu_cnt.io.func3 <= func3 @[top.scala 119:21]
    alu_cnt.io.func7 <= func7 @[top.scala 120:21]
    EX.io.aluOutput_in <= alu.io.out @[top.scala 122:23]
    EX.io.rd_in <= ID.io.rd_out @[top.scala 123:16]
    EX.io.rs2Sel_in <= ID.io.rs2Ins_out @[top.scala 124:20]
    EX.io.memWrite_in <= ID.io.memWrite_out @[top.scala 125:22]
    EX.io.memRead_in <= ID.io.memRead_out @[top.scala 126:21]
    EX.io.memToReg_in <= ID.io.memToReg_out @[top.scala 127:22]
    EX.io.regWrite_in <= ID.io.regWrite_out @[top.scala 128:27]
    EX.io.baseReg_in <= ID.io.operandA_out @[top.scala 129:26]
    EX.io.offSet_in <= ID.io.operandB_out @[top.scala 130:25]
    Mem_wb.io.aluOutput_in <= EX.io.aluOutput_out @[top.scala 133:27]
    Mem_wb.io.dataOut_in <= data_mem.io.out @[top.scala 134:25]
    Mem_wb.io.rd_in <= EX.io.rd_out @[top.scala 135:20]
    Mem_wb.io.regWrite_in <= EX.io.regWrite_out @[top.scala 136:26]
    Mem_wb.io.MemRead_in <= EX.io.memRead_out @[top.scala 137:25]
    Mem_wb.io.memToReg_in <= EX.io.memToReg_out @[top.scala 138:26]
    Mem_wb.io.memWrite_in <= EX.io.memWrite_out @[top.scala 139:26]
    Mem_wb.io.baseReg_in <= EX.io.baseReg_out @[top.scala 140:25]
    Mem_wb.io.offSet_in <= EX.io.offSet_out @[top.scala 141:24]
    Mem_wb.io.rs2Sel_in <= EX.io.rs2Sel_out @[top.scala 142:24]
    node _T_1 = eq(controler.io.next_pc, UInt<2>("h03")) @[top.scala 144:31]
    when _T_1 : @[top.scala 144:43]
      node _pc_io_addr_T = asUInt(Jalr.io.out) @[top.scala 145:43]
      pc.io.addr <= _pc_io_addr_T @[top.scala 145:28]
      IF.io.ins_in <= UInt<1>("h00") @[top.scala 146:30]
      IF.io.pc_in <= UInt<1>("h00") @[top.scala 147:29]
      IF.io.pc4_in <= UInt<1>("h00") @[top.scala 148:30]
      skip @[top.scala 144:43]
    else : @[top.scala 149:53]
      node _T_2 = eq(controler.io.next_pc, UInt<2>("h02")) @[top.scala 149:41]
      when _T_2 : @[top.scala 149:53]
        node _pc_io_addr_T_1 = asUInt(imm.io.uj_imm) @[top.scala 150:45]
        pc.io.addr <= _pc_io_addr_T_1 @[top.scala 150:28]
        IF.io.ins_in <= UInt<1>("h00") @[top.scala 151:30]
        IF.io.pc_in <= UInt<1>("h00") @[top.scala 152:29]
        IF.io.pc4_in <= UInt<1>("h00") @[top.scala 153:30]
        skip @[top.scala 149:53]
    branch.io.arg_x <= asSInt(UInt<1>("h00")) @[top.scala 157:20]
    branch.io.arg_y <= asSInt(UInt<1>("h00")) @[top.scala 158:20]
    branch.io.branch <= controler.io.branch @[top.scala 159:22]
    node _T_3 = eq(controler.io.op_a, UInt<1>("h01")) @[top.scala 162:32]
    when _T_3 : @[top.scala 162:44]
      node _ID_io_operandA_in_T_1 = asSInt(IF.io.pc_out) @[top.scala 163:53]
      ID.io.operandA_in <= _ID_io_operandA_in_T_1 @[top.scala 163:35]
      skip @[top.scala 162:44]
    else : @[top.scala 164:50]
      node _T_4 = eq(controler.io.op_a, UInt<2>("h02")) @[top.scala 164:38]
      when _T_4 : @[top.scala 164:50]
        node _ID_io_operandA_in_T_2 = asSInt(IF.io.pc4_out) @[top.scala 165:54]
        ID.io.operandA_in <= _ID_io_operandA_in_T_2 @[top.scala 165:35]
        skip @[top.scala 164:50]
      else : @[top.scala 166:20]
        ID.io.operandA_in <= reg_file.io.rd1 @[top.scala 167:35]
        skip @[top.scala 166:20]
    branch.io.arg_x <= ID.io.operandA_out @[top.scala 169:20]
    node _T_5 = eq(controler.io.extend_sel, UInt<1>("h00")) @[top.scala 171:38]
    node _T_6 = eq(controler.io.op_b, UInt<1>("h01")) @[top.scala 171:70]
    node _T_7 = and(_T_5, _T_6) @[top.scala 171:50]
    when _T_7 : @[top.scala 171:78]
      ID.io.operandB_in <= imm.io.i_imm @[top.scala 172:35]
      skip @[top.scala 171:78]
    else : @[top.scala 173:84]
      node _T_8 = eq(controler.io.extend_sel, UInt<1>("h01")) @[top.scala 173:44]
      node _T_9 = eq(controler.io.op_b, UInt<1>("h01")) @[top.scala 173:76]
      node _T_10 = and(_T_8, _T_9) @[top.scala 173:56]
      when _T_10 : @[top.scala 173:84]
        ID.io.operandB_in <= imm.io.u_imm @[top.scala 174:35]
        skip @[top.scala 173:84]
      else : @[top.scala 175:84]
        node _T_11 = eq(controler.io.extend_sel, UInt<2>("h02")) @[top.scala 175:44]
        node _T_12 = eq(controler.io.op_b, UInt<1>("h01")) @[top.scala 175:76]
        node _T_13 = and(_T_11, _T_12) @[top.scala 175:56]
        when _T_13 : @[top.scala 175:84]
          ID.io.operandB_in <= imm.io.s_imm @[top.scala 176:35]
          skip @[top.scala 175:84]
        else : @[top.scala 177:20]
          ID.io.operandB_in <= reg_file.io.rd2 @[top.scala 178:35]
          skip @[top.scala 177:20]
    branch.io.arg_y <= ID.io.operandB_out @[top.scala 180:20]
    branch.io.alu_opp <= controler.io.aluop @[top.scala 181:22]
    Jalr.io.pc_addr <= imm.io.i_imm @[top.scala 183:20]
    Jalr.io.addr <= reg_file.io.rd1 @[top.scala 184:17]
    node _mux_b_T = asUInt(imm.io.sb_imm) @[top.scala 187:63]
    node mux_b = mux(branch.io.br_taken, pc.io.pc_4, _mux_b_T) @[top.scala 187:18]
    node _mux_d_T = asUInt(imm.io.uj_imm) @[top.scala 193:44]
    node _mux_d_T_1 = asUInt(Jalr.io.out) @[top.scala 194:42]
    node _mux_d_T_2 = eq(UInt<1>("h01"), controler.io.next_pc) @[Mux.scala 80:60]
    node _mux_d_T_3 = mux(_mux_d_T_2, mux_b, pc.io.pc_4) @[Mux.scala 80:57]
    node _mux_d_T_4 = eq(UInt<2>("h02"), controler.io.next_pc) @[Mux.scala 80:60]
    node _mux_d_T_5 = mux(_mux_d_T_4, _mux_d_T, _mux_d_T_3) @[Mux.scala 80:57]
    node _mux_d_T_6 = eq(UInt<2>("h03"), controler.io.next_pc) @[Mux.scala 80:60]
    node mux_d = mux(_mux_d_T_6, _mux_d_T_1, _mux_d_T_5) @[Mux.scala 80:57]
    pc.io.addr <= mux_d @[top.scala 196:15]
    node _data_mem_io_Addr_T = bits(EX.io.aluOutput_out, 11, 2) @[top.scala 199:42]
    data_mem.io.Addr <= _data_mem_io_Addr_T @[top.scala 199:21]
    data_mem.io.MemWrite <= EX.io.memWrite_out @[top.scala 200:25]
    data_mem.io.MemRead <= EX.io.memRead_out @[top.scala 201:24]
    node _data_mem_io_Data_T = asSInt(EX.io.rs2Sel_out) @[top.scala 202:40]
    data_mem.io.Data <= _data_mem_io_Data_T @[top.scala 202:21]
    node _reg_file_io_WriteData_T = asSInt(Mem_wb.io.rs2Sel_out) @[top.scala 204:49]
    reg_file.io.WriteData <= _reg_file_io_WriteData_T @[top.scala 204:26]
    
