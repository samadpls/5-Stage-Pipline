;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module pccounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, pc_4 : UInt<32>, pc_out : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc_counter.scala 12:24]
    reg <= io.addr @[pc_counter.scala 14:12]
    io.pc_out <= reg @[pc_counter.scala 15:18]
    node _io_pc_4_T = add(reg, UInt<3>("h04")) @[pc_counter.scala 16:21]
    node _io_pc_4_T_1 = tail(_io_pc_4_T, 1) @[pc_counter.scala 16:21]
    io.pc_4 <= _io_pc_4_T_1 @[pc_counter.scala 16:16]
    
  module datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Addr : UInt<8>, flip Data : SInt<32>, flip MemWrite : UInt<1>, flip MemRead : UInt<1>, out : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[datamem.scala 13:22]
    node _T = eq(io.MemWrite, UInt<1>("h01")) @[datamem.scala 14:27]
    when _T : @[datamem.scala 14:35]
      write mport MPORT = mem[io.Addr], clock
      MPORT <= io.Data
      skip @[datamem.scala 14:35]
    node _T_1 = eq(io.MemRead, UInt<1>("h01")) @[datamem.scala 17:25]
    when _T_1 : @[datamem.scala 17:33]
      read mport io_out_MPORT = mem[io.Addr], clock @[datamem.scala 18:35]
      io.out <= io_out_MPORT @[datamem.scala 18:24]
      skip @[datamem.scala 17:33]
    else : @[datamem.scala 20:20]
      io.out <= asSInt(UInt<1>("h00")) @[datamem.scala 20:28]
      skip @[datamem.scala 20:20]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<10>, inst : UInt<32>}
    
    cmem imem : UInt<32>[32] @[instmem.scala 13:20]
    node _io_inst_T = bits(io.addr, 4, 0) @[instmem.scala 15:25]
    read mport io_inst_MPORT = imem[_io_inst_T], clock @[instmem.scala 15:25]
    io.inst <= io_inst_MPORT @[instmem.scala 15:13]
    
  module reg : 
    input clock : Clock
    input reset : Reset
    output io : {flip write : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip WriteData : SInt<32>, rd1 : SInt<32>, rd2 : SInt<32>}
    
    wire _register_WIRE : SInt<32>[32] @[regfile.scala 17:39]
    _register_WIRE[0] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[1] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[2] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[3] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[4] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[5] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[6] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[7] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[8] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[9] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[10] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[11] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[12] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[13] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[14] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[15] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[16] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[17] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[18] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[19] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[20] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[21] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[22] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[23] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[24] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[25] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[26] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[27] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[28] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[29] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[30] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    _register_WIRE[31] <= asSInt(UInt<32>("h00")) @[regfile.scala 17:39]
    reg register : SInt<32>[32], clock with : (reset => (reset, _register_WIRE)) @[regfile.scala 17:31]
    register[0] <= asSInt(UInt<1>("h00")) @[regfile.scala 18:21]
    io.rd1 <= register[io.rs1] @[regfile.scala 21:16]
    io.rd2 <= register[io.rs2] @[regfile.scala 22:16]
    node _T = eq(io.write, UInt<1>("h01")) @[regfile.scala 24:23]
    when _T : @[regfile.scala 24:31]
      node _T_1 = eq(io.rd, UInt<1>("h00")) @[regfile.scala 25:28]
      when _T_1 : @[regfile.scala 25:43]
        register[io.rd] <= asSInt(UInt<1>("h00")) @[regfile.scala 26:41]
        skip @[regfile.scala 25:43]
      else : @[regfile.scala 27:28]
        register[io.rd] <= io.WriteData @[regfile.scala 28:41]
        skip @[regfile.scala 27:28]
      skip @[regfile.scala 24:31]
    
  module controler : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcod : UInt<7>, memwrite : UInt<1>, branch : UInt<1>, memread : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<1>, aluop : UInt<3>, op_a : UInt<2>, op_b : UInt<1>, extend_sel : UInt<2>, next_pc : UInt<2>}
    
    io.memwrite <= UInt<1>("h00") @[controler.scala 22:20]
    io.branch <= UInt<1>("h00") @[controler.scala 23:18]
    io.memread <= UInt<1>("h00") @[controler.scala 24:20]
    io.regwrite <= UInt<1>("h00") @[controler.scala 25:20]
    io.memtoreg <= UInt<1>("h00") @[controler.scala 26:20]
    io.aluop <= UInt<1>("h00") @[controler.scala 27:17]
    io.op_a <= UInt<1>("h00") @[controler.scala 28:16]
    io.op_b <= UInt<1>("h00") @[controler.scala 29:16]
    io.extend_sel <= UInt<1>("h00") @[controler.scala 30:22]
    io.next_pc <= UInt<1>("h00") @[controler.scala 31:19]
    node _T = eq(UInt<5>("h013"), io.opcod) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.regwrite <= UInt<1>("h01") @[controler.scala 34:20]
      io.aluop <= UInt<1>("h01") @[controler.scala 35:17]
      io.op_b <= UInt<1>("h01") @[controler.scala 36:16]
      io.memwrite <= UInt<1>("h00") @[controler.scala 37:20]
      io.branch <= UInt<1>("h00") @[controler.scala 38:18]
      io.memread <= UInt<1>("h00") @[controler.scala 39:20]
      io.memtoreg <= UInt<1>("h00") @[controler.scala 40:20]
      io.op_a <= UInt<1>("h00") @[controler.scala 41:16]
      io.extend_sel <= UInt<1>("h00") @[controler.scala 42:22]
      io.next_pc <= UInt<1>("h00") @[controler.scala 43:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h03"), io.opcod) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.regwrite <= UInt<1>("h01") @[controler.scala 46:24]
        io.memread <= UInt<1>("h01") @[controler.scala 47:23]
        io.memtoreg <= UInt<1>("h01") @[controler.scala 48:24]
        io.aluop <= UInt<3>("h04") @[controler.scala 49:21]
        io.op_b <= UInt<1>("h01") @[controler.scala 50:20]
        io.memwrite <= UInt<1>("h00") @[controler.scala 51:24]
        io.branch <= UInt<1>("h00") @[controler.scala 52:22]
        io.op_a <= UInt<1>("h00") @[controler.scala 53:20]
        io.extend_sel <= UInt<1>("h00") @[controler.scala 54:26]
        io.next_pc <= UInt<1>("h00") @[controler.scala 55:23]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<7>("h06f"), io.opcod) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.regwrite <= UInt<1>("h01") @[controler.scala 58:24]
          io.aluop <= UInt<2>("h03") @[controler.scala 59:21]
          io.op_a <= UInt<1>("h01") @[controler.scala 60:20]
          io.next_pc <= UInt<2>("h02") @[controler.scala 61:23]
          io.memwrite <= UInt<1>("h00") @[controler.scala 62:24]
          io.branch <= UInt<1>("h00") @[controler.scala 63:22]
          io.memread <= UInt<1>("h00") @[controler.scala 64:24]
          io.memtoreg <= UInt<1>("h00") @[controler.scala 65:24]
          io.op_b <= UInt<1>("h00") @[controler.scala 66:20]
          io.extend_sel <= UInt<1>("h00") @[controler.scala 67:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<7>("h067"), io.opcod) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.regwrite <= UInt<1>("h01") @[controler.scala 71:24]
            io.aluop <= UInt<2>("h03") @[controler.scala 72:21]
            io.op_a <= UInt<1>("h01") @[controler.scala 73:20]
            io.op_b <= UInt<1>("h01") @[controler.scala 74:20]
            io.next_pc <= UInt<2>("h03") @[controler.scala 75:23]
            io.memwrite <= UInt<1>("h00") @[controler.scala 76:24]
            io.branch <= UInt<1>("h00") @[controler.scala 77:22]
            io.memread <= UInt<1>("h00") @[controler.scala 78:24]
            io.memtoreg <= UInt<1>("h00") @[controler.scala 79:24]
            io.extend_sel <= UInt<1>("h00") @[controler.scala 80:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<6>("h033"), io.opcod) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.regwrite <= UInt<1>("h01") @[controler.scala 84:24]
              io.memwrite <= UInt<1>("h00") @[controler.scala 85:24]
              io.branch <= UInt<1>("h00") @[controler.scala 86:22]
              io.memread <= UInt<1>("h00") @[controler.scala 87:24]
              io.memtoreg <= UInt<1>("h00") @[controler.scala 88:24]
              io.aluop <= UInt<1>("h00") @[controler.scala 89:21]
              io.op_a <= UInt<1>("h00") @[controler.scala 90:20]
              io.op_b <= UInt<1>("h00") @[controler.scala 91:20]
              io.extend_sel <= UInt<1>("h00") @[controler.scala 92:26]
              io.next_pc <= UInt<1>("h00") @[controler.scala 93:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<6>("h023"), io.opcod) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.memwrite <= UInt<1>("h01") @[controler.scala 96:24]
                io.regwrite <= UInt<1>("h01") @[controler.scala 97:24]
                io.aluop <= UInt<3>("h05") @[controler.scala 98:21]
                io.op_b <= UInt<1>("h01") @[controler.scala 99:20]
                io.extend_sel <= UInt<1>("h01") @[controler.scala 100:26]
                io.memwrite <= UInt<1>("h00") @[controler.scala 101:24]
                io.branch <= UInt<1>("h00") @[controler.scala 102:22]
                io.memread <= UInt<1>("h00") @[controler.scala 103:24]
                io.memtoreg <= UInt<1>("h00") @[controler.scala 104:24]
                io.op_a <= UInt<1>("h00") @[controler.scala 105:20]
                io.next_pc <= UInt<1>("h00") @[controler.scala 106:23]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h063"), io.opcod) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.branch <= UInt<1>("h01") @[controler.scala 110:22]
                  io.aluop <= UInt<2>("h02") @[controler.scala 111:21]
                  io.next_pc <= UInt<1>("h01") @[controler.scala 112:23]
                  io.memwrite <= UInt<1>("h00") @[controler.scala 113:24]
                  io.memread <= UInt<1>("h00") @[controler.scala 114:24]
                  io.regwrite <= UInt<1>("h00") @[controler.scala 115:24]
                  io.memtoreg <= UInt<1>("h00") @[controler.scala 116:24]
                  io.op_a <= UInt<1>("h00") @[controler.scala 117:20]
                  io.op_b <= UInt<1>("h00") @[controler.scala 118:20]
                  io.extend_sel <= UInt<1>("h00") @[controler.scala 119:26]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), io.opcod) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.regwrite <= UInt<1>("h01") @[controler.scala 123:24]
                    io.aluop <= UInt<3>("h06") @[controler.scala 124:21]
                    io.op_a <= UInt<2>("h02") @[controler.scala 125:20]
                    io.op_b <= UInt<1>("h01") @[controler.scala 126:20]
                    io.next_pc <= UInt<1>("h00") @[controler.scala 127:23]
                    io.extend_sel <= UInt<2>("h02") @[controler.scala 128:26]
                    io.memwrite <= UInt<1>("h00") @[controler.scala 129:24]
                    io.branch <= UInt<1>("h00") @[controler.scala 130:22]
                    io.memread <= UInt<1>("h00") @[controler.scala 131:24]
                    io.memtoreg <= UInt<1>("h00") @[controler.scala 132:24]
                    skip @[Conditional.scala 39:67]
    
  module ALU4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_Op : UInt<5>, flip in1 : SInt<32>, flip in2 : SInt<32>, out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[alu.scala 15:11]
    node _T = eq(UInt<1>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_out_T = add(io.in1, io.in2) @[alu.scala 17:39]
      node _io_out_T_1 = tail(_io_out_T, 1) @[alu.scala 17:39]
      node _io_out_T_2 = asSInt(_io_out_T_1) @[alu.scala 17:39]
      io.out <= _io_out_T_2 @[alu.scala 17:31]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_out_T_3 = bits(io.in2, 4, 0) @[alu.scala 18:46]
        node _io_out_T_4 = dshl(io.in1, _io_out_T_3) @[alu.scala 18:38]
        io.out <= _io_out_T_4 @[alu.scala 18:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = lt(io.in1, io.in2) @[alu.scala 20:24]
          when _T_3 : @[alu.scala 21:13]
            io.out <= asSInt(UInt<2>("h01")) @[alu.scala 21:20]
            skip @[alu.scala 21:13]
          else : @[alu.scala 21:36]
            io.out <= asSInt(UInt<1>("h00")) @[alu.scala 22:23]
            skip @[alu.scala 21:36]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<2>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _T_5 = asUInt(io.in1) @[alu.scala 24:25]
            node _T_6 = asUInt(io.in2) @[alu.scala 24:39]
            node _T_7 = lt(_T_5, _T_6) @[alu.scala 24:31]
            when _T_7 : @[alu.scala 24:46]
              io.out <= asSInt(UInt<2>("h01")) @[alu.scala 24:53]
              skip @[alu.scala 24:46]
            else : @[alu.scala 24:69]
              io.out <= asSInt(UInt<1>("h00")) @[alu.scala 24:76]
              skip @[alu.scala 24:69]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_8 = eq(UInt<5>("h016"), io.alu_Op) @[Conditional.scala 37:30]
            when _T_8 : @[Conditional.scala 39:67]
              node _T_9 = asUInt(io.in1) @[alu.scala 27:25]
              node _T_10 = asUInt(io.in2) @[alu.scala 27:39]
              node _T_11 = lt(_T_9, _T_10) @[alu.scala 27:31]
              when _T_11 : @[alu.scala 27:46]
                io.out <= asSInt(UInt<2>("h01")) @[alu.scala 27:53]
                skip @[alu.scala 27:46]
              else : @[alu.scala 27:69]
                io.out <= asSInt(UInt<1>("h00")) @[alu.scala 27:76]
                skip @[alu.scala 27:69]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_12 = eq(UInt<3>("h04"), io.alu_Op) @[Conditional.scala 37:30]
              when _T_12 : @[Conditional.scala 39:67]
                node _io_out_T_5 = xor(io.in1, io.in2) @[alu.scala 29:39]
                node _io_out_T_6 = asSInt(_io_out_T_5) @[alu.scala 29:39]
                io.out <= _io_out_T_6 @[alu.scala 29:30]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_13 = eq(UInt<3>("h05"), io.alu_Op) @[Conditional.scala 37:30]
                when _T_13 : @[Conditional.scala 39:67]
                  node _io_out_T_7 = asUInt(io.in1) @[alu.scala 30:40]
                  node _io_out_T_8 = bits(io.in2, 4, 0) @[alu.scala 30:54]
                  node _io_out_T_9 = dshr(_io_out_T_7, _io_out_T_8) @[alu.scala 30:46]
                  node _io_out_T_10 = asSInt(_io_out_T_9) @[alu.scala 30:68]
                  io.out <= _io_out_T_10 @[alu.scala 30:30]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_14 = eq(UInt<3>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                  when _T_14 : @[Conditional.scala 39:67]
                    node _io_out_T_11 = or(io.in1, io.in2) @[alu.scala 31:38]
                    node _io_out_T_12 = asSInt(_io_out_T_11) @[alu.scala 31:38]
                    io.out <= _io_out_T_12 @[alu.scala 31:30]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_15 = eq(UInt<3>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_15 : @[Conditional.scala 39:67]
                      node _io_out_T_13 = and(io.in1, io.in2) @[alu.scala 32:39]
                      node _io_out_T_14 = asSInt(_io_out_T_13) @[alu.scala 32:39]
                      io.out <= _io_out_T_14 @[alu.scala 32:30]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_16 = eq(UInt<4>("h08"), io.alu_Op) @[Conditional.scala 37:30]
                      when _T_16 : @[Conditional.scala 39:67]
                        node _io_out_T_15 = sub(io.in1, io.in2) @[alu.scala 33:39]
                        node _io_out_T_16 = tail(_io_out_T_15, 1) @[alu.scala 33:39]
                        node _io_out_T_17 = asSInt(_io_out_T_16) @[alu.scala 33:39]
                        io.out <= _io_out_T_17 @[alu.scala 33:30]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_17 = eq(UInt<4>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                        when _T_17 : @[Conditional.scala 39:67]
                          node _io_out_T_18 = asUInt(io.in1) @[alu.scala 34:40]
                          node _io_out_T_19 = bits(io.in2, 4, 0) @[alu.scala 34:54]
                          node _io_out_T_20 = dshr(_io_out_T_18, _io_out_T_19) @[alu.scala 34:46]
                          node _io_out_T_21 = asSInt(_io_out_T_20) @[alu.scala 34:68]
                          io.out <= _io_out_T_21 @[alu.scala 34:30]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_18 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                          when _T_18 : @[Conditional.scala 39:67]
                            io.out <= io.in1 @[alu.scala 35:30]
                            skip @[Conditional.scala 39:67]
    
  module ImmdValGen1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc_val : UInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, uj_imm : SInt<32>, u_imm : SInt<32>, i_imm : SInt<32>}
    
    node s_imm13_hi = bits(io.instr, 31, 25) @[imme.scala 21:36]
    node s_imm13_lo = bits(io.instr, 11, 7) @[imme.scala 21:52]
    node s_imm13 = cat(s_imm13_hi, s_imm13_lo) @[Cat.scala 30:58]
    node _io_s_imm_T = bits(s_imm13, 11, 11) @[imme.scala 22:41]
    node _io_s_imm_T_1 = bits(_io_s_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_s_imm_hi = mux(_io_s_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _io_s_imm_T_2 = cat(io_s_imm_hi, s_imm13) @[Cat.scala 30:58]
    node _io_s_imm_T_3 = asSInt(_io_s_imm_T_2) @[imme.scala 22:57]
    io.s_imm <= _io_s_imm_T_3 @[imme.scala 22:18]
    node sb_imm13_hi_hi_hi = bits(io.instr, 31, 31) @[imme.scala 24:37]
    node sb_imm13_hi_hi_lo = bits(io.instr, 7, 7) @[imme.scala 24:50]
    node sb_imm13_hi_lo = bits(io.instr, 30, 25) @[imme.scala 24:62]
    node sb_imm13_lo_hi = bits(io.instr, 11, 8) @[imme.scala 24:78]
    node sb_imm13_lo = cat(sb_imm13_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sb_imm13_hi_hi = cat(sb_imm13_hi_hi_hi, sb_imm13_hi_hi_lo) @[Cat.scala 30:58]
    node sb_imm13_hi = cat(sb_imm13_hi_hi, sb_imm13_hi_lo) @[Cat.scala 30:58]
    node sb_imm13 = cat(sb_imm13_hi, sb_imm13_lo) @[Cat.scala 30:58]
    node _io_sb_imm_T = bits(sb_imm13, 12, 12) @[imme.scala 25:44]
    node _io_sb_imm_T_1 = bits(_io_sb_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_sb_imm_hi = mux(_io_sb_imm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _io_sb_imm_T_2 = cat(io_sb_imm_hi, sb_imm13) @[Cat.scala 30:58]
    node _io_sb_imm_T_3 = add(_io_sb_imm_T_2, io.pc_val) @[imme.scala 25:61]
    node _io_sb_imm_T_4 = tail(_io_sb_imm_T_3, 1) @[imme.scala 25:61]
    node _io_sb_imm_T_5 = asSInt(_io_sb_imm_T_4) @[imme.scala 25:74]
    io.sb_imm <= _io_sb_imm_T_5 @[imme.scala 25:19]
    node uj_imm21_hi_hi_hi = bits(io.instr, 31, 31) @[imme.scala 27:37]
    node uj_imm21_hi_hi_lo = bits(io.instr, 19, 12) @[imme.scala 27:50]
    node uj_imm21_hi_lo = bits(io.instr, 20, 20) @[imme.scala 27:66]
    node uj_imm21_lo_hi = bits(io.instr, 30, 21) @[imme.scala 27:79]
    node uj_imm21_lo = cat(uj_imm21_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node uj_imm21_hi_hi = cat(uj_imm21_hi_hi_hi, uj_imm21_hi_hi_lo) @[Cat.scala 30:58]
    node uj_imm21_hi = cat(uj_imm21_hi_hi, uj_imm21_hi_lo) @[Cat.scala 30:58]
    node uj_imm21 = cat(uj_imm21_hi, uj_imm21_lo) @[Cat.scala 30:58]
    node _io_uj_imm_T = bits(uj_imm21, 20, 20) @[imme.scala 28:44]
    node _io_uj_imm_T_1 = bits(_io_uj_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_uj_imm_hi = mux(_io_uj_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_uj_imm_T_2 = cat(io_uj_imm_hi, uj_imm21) @[Cat.scala 30:58]
    node _io_uj_imm_T_3 = add(_io_uj_imm_T_2, io.pc_val) @[imme.scala 28:61]
    node _io_uj_imm_T_4 = tail(_io_uj_imm_T_3, 1) @[imme.scala 28:61]
    node _io_uj_imm_T_5 = asSInt(_io_uj_imm_T_4) @[imme.scala 28:74]
    io.uj_imm <= _io_uj_imm_T_5 @[imme.scala 28:19]
    node _io_u_imm_T = bits(io.instr, 31, 31) @[imme.scala 30:43]
    node _io_u_imm_T_1 = bits(_io_u_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_u_imm_hi = mux(_io_u_imm_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node io_u_imm_lo = bits(io.instr, 31, 12) @[imme.scala 30:57]
    node _io_u_imm_T_2 = cat(io_u_imm_hi, io_u_imm_lo) @[Cat.scala 30:58]
    node _io_u_imm_T_3 = shl(_io_u_imm_T_2, 12) @[imme.scala 30:67]
    node _io_u_imm_T_4 = asSInt(_io_u_imm_T_3) @[imme.scala 30:74]
    io.u_imm <= _io_u_imm_T_4 @[imme.scala 30:18]
    node _io_i_imm_T = bits(io.instr, 31, 31) @[imme.scala 32:42]
    node _io_i_imm_T_1 = bits(_io_i_imm_T, 0, 0) @[Bitwise.scala 72:15]
    node io_i_imm_hi = mux(_io_i_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_i_imm_lo = bits(io.instr, 31, 20) @[imme.scala 32:56]
    node _io_i_imm_T_2 = cat(io_i_imm_hi, io_i_imm_lo) @[Cat.scala 30:58]
    node _io_i_imm_T_3 = asSInt(_io_i_imm_T_2) @[imme.scala 32:66]
    io.i_imm <= _io_i_imm_T_3 @[imme.scala 32:18]
    
  module jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : SInt<32>, flip pc_addr : SInt<32>, out : SInt<32>}
    
    node _io_out_T = add(io.addr, io.pc_addr) @[jalr.scala 11:22]
    node _io_out_T_1 = tail(_io_out_T, 1) @[jalr.scala 11:22]
    node _io_out_T_2 = asSInt(_io_out_T_1) @[jalr.scala 11:22]
    node _io_out_T_3 = and(_io_out_T_2, asSInt(UInt<33>("h0fffffffe"))) @[jalr.scala 11:35]
    node _io_out_T_4 = asSInt(_io_out_T_3) @[jalr.scala 11:35]
    io.out <= _io_out_T_4 @[jalr.scala 11:11]
    
  module alu_controler : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_op : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<1>, x : UInt<5>}
    
    io.x <= UInt<1>("h00") @[alu_controler.scala 13:9]
    node _T = eq(UInt<1>("h01"), io.alu_op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_x_T = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
      io.x <= _io_x_T @[alu_controler.scala 16:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h00"), io.alu_op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node io_x_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
        node _io_x_T_1 = cat(io_x_hi, io.func3) @[Cat.scala 30:58]
        io.x <= _io_x_T_1 @[alu_controler.scala 19:17]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.alu_op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node io_x_hi_1 = bits(io.alu_op, 1, 0) @[alu_controler.scala 22:32]
          node _io_x_T_2 = cat(io_x_hi_1, io.func3) @[Cat.scala 30:58]
          io.x <= _io_x_T_2 @[alu_controler.scala 22:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.alu_op) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _io_x_T_3 = mux(UInt<1>("h01"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
            io.x <= _io_x_T_3 @[alu_controler.scala 25:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h05"), io.alu_op) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _io_x_T_4 = mux(UInt<1>("h00"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
              io.x <= _io_x_T_4 @[alu_controler.scala 28:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h04"), io.alu_op) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _io_x_T_5 = mux(UInt<1>("h00"), UInt<5>("h01f"), UInt<5>("h00")) @[Bitwise.scala 72:12]
                io.x <= _io_x_T_5 @[alu_controler.scala 31:17]
                skip @[Conditional.scala 39:67]
    
  module Inst_fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip ins_in : UInt<32>, pc_out : UInt<32>, ins_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF.scala 24:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF.scala 25:30]
    reg reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF.scala 26:30]
    reg_pc <= io.pc_in @[IF.scala 28:16]
    reg_pc4 <= io.pc4_in @[IF.scala 29:17]
    reg_ins <= io.ins_in @[IF.scala 30:17]
    io.pc_out <= reg_pc @[IF.scala 32:19]
    io.pc4_out <= reg_pc4 @[IF.scala 33:20]
    io.ins_out <= reg_ins @[IF.scala 34:20]
    
  module ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip operandAsel_in : UInt<2>, flip operandBsel_in : UInt<1>, flip br_en_in : UInt<1>, flip aluOp_in : UInt<3>, flip regWrite_in : UInt<1>, flip operandA_in : SInt<32>, flip operandB_in : SInt<32>, flip rd_in : UInt<5>, flip func3 : UInt<3>, flip func7 : UInt<7>, flip rs1Ins_in : UInt<5>, flip rs2Ins_in : UInt<5>, flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip NextPc : UInt<2>, flip imm : SInt<32>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, operandAsel_out : UInt<2>, operandBsel_out : UInt<1>, br_en_out : UInt<1>, aluOp_out : UInt<3>, regWrite_out : UInt<1>, operandA_out : SInt<32>, operandB_out : SInt<32>, rd_out : UInt<5>, func3_o : UInt<3>, func7_o : UInt<7>, rs1Ins_out : UInt<5>, rs2Ins_out : UInt<5>, pc_out : UInt<32>, pc4_out : UInt<32>, NextPc_out : UInt<2>, imm_out : SInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 57:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 58:34]
    reg reg_fun3 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID.scala 59:29]
    reg reg_fun7 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[ID.scala 60:29]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 61:35]
    reg reg_operandAsel : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID.scala 62:38]
    reg reg_operandBsel : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 63:38]
    reg reg_br_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 64:28]
    reg reg_aluOp : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID.scala 65:32]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 66:35]
    reg reg_operandA : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID.scala 67:35]
    reg reg_operandB : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID.scala 68:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID.scala 69:29]
    reg reg_rs1Ins : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID.scala 71:33]
    reg reg_rs2Ins : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID.scala 72:33]
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID.scala 73:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID.scala 74:30]
    reg reg_NextPc : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID.scala 76:33]
    reg reg_imm : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID.scala 77:29]
    reg_memWrite <= io.memWrite_in @[ID.scala 80:22]
    reg_fun3 <= io.func3 @[ID.scala 81:17]
    reg_fun7 <= io.func7 @[ID.scala 82:17]
    reg_memRead <= io.memRead_in @[ID.scala 83:21]
    reg_memToReg <= io.memToReg_in @[ID.scala 84:22]
    reg_operandA <= io.operandA_in @[ID.scala 85:22]
    reg_operandB <= io.operandB_in @[ID.scala 86:22]
    reg_rd <= io.rd_in @[ID.scala 87:16]
    reg_aluOp <= io.aluOp_in @[ID.scala 89:19]
    reg_regWrite <= io.regWrite_in @[ID.scala 90:22]
    reg_rs1Ins <= io.rs1Ins_in @[ID.scala 91:20]
    reg_rs2Ins <= io.rs2Ins_in @[ID.scala 92:20]
    reg_operandAsel <= io.operandAsel_in @[ID.scala 93:25]
    reg_operandBsel <= io.operandBsel_in @[ID.scala 94:25]
    reg_br_en <= io.br_en_in @[ID.scala 95:15]
    reg_pc <= io.pc_in @[ID.scala 96:16]
    reg_pc4 <= io.pc4_in @[ID.scala 97:17]
    reg_NextPc <= io.NextPc @[ID.scala 99:20]
    reg_imm <= io.imm @[ID.scala 100:17]
    io.memWrite_out <= reg_memWrite @[ID.scala 103:25]
    io.memRead_out <= reg_memRead @[ID.scala 104:24]
    io.memToReg_out <= reg_memToReg @[ID.scala 105:25]
    io.func3_o <= reg_fun3 @[ID.scala 106:19]
    io.func7_o <= reg_fun7 @[ID.scala 107:19]
    io.operandA_out <= reg_operandA @[ID.scala 108:25]
    io.operandB_out <= reg_operandB @[ID.scala 109:25]
    io.rd_out <= reg_rd @[ID.scala 110:19]
    io.aluOp_out <= reg_aluOp @[ID.scala 112:22]
    io.regWrite_out <= reg_regWrite @[ID.scala 113:25]
    io.rs1Ins_out <= reg_rs1Ins @[ID.scala 114:23]
    io.rs2Ins_out <= reg_rs2Ins @[ID.scala 115:23]
    io.operandAsel_out <= reg_operandAsel @[ID.scala 116:28]
    io.operandBsel_out <= reg_operandBsel @[ID.scala 117:28]
    io.br_en_out <= reg_br_en @[ID.scala 118:18]
    io.pc_out <= reg_pc @[ID.scala 119:19]
    io.pc4_out <= reg_pc4 @[ID.scala 120:20]
    io.NextPc_out <= reg_NextPc @[ID.scala 122:23]
    io.imm_out <= reg_imm @[ID.scala 123:19]
    
  module EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip aluOutput_in : SInt<32>, flip regWrite_in : UInt<1>, flip rs2Sel_in : UInt<5>, flip baseReg_in : SInt<32>, flip offSet_in : SInt<32>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>, rs2Sel_out : UInt<5>, baseReg_out : SInt<32>, offSet_out : SInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 29:31]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 30:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 31:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX.scala 32:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 33:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 34:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX.scala 35:35]
    reg reg_rs2Sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX.scala 36:33]
    reg reg_baseReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 37:34]
    reg reg_offSet : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX.scala 38:33]
    reg_memWrite <= io.memWrite_in @[EX.scala 40:22]
    reg_memRead <= io.memRead_in @[EX.scala 41:21]
    reg_memToReg <= io.memToReg_in @[EX.scala 42:22]
    reg_rd <= io.rd_in @[EX.scala 43:16]
    reg_aluOutput <= io.aluOutput_in @[EX.scala 45:23]
    reg_regWrite <= io.regWrite_in @[EX.scala 46:22]
    reg_rs2Sel <= io.rs2Sel_in @[EX.scala 47:20]
    reg_baseReg <= io.baseReg_in @[EX.scala 48:21]
    reg_offSet <= io.offSet_in @[EX.scala 49:20]
    io.memWrite_out <= reg_memWrite @[EX.scala 51:21]
    io.memRead_out <= reg_memRead @[EX.scala 52:24]
    io.memToReg_out <= reg_memToReg @[EX.scala 53:25]
    io.rd_out <= reg_rd @[EX.scala 54:19]
    io.aluOutput_out <= reg_aluOutput @[EX.scala 56:26]
    io.regWrite_out <= reg_regWrite @[EX.scala 57:25]
    io.rs2Sel_out <= reg_rs2Sel @[EX.scala 58:23]
    io.baseReg_out <= reg_baseReg @[EX.scala 59:24]
    io.offSet_out <= reg_offSet @[EX.scala 60:23]
    
  module MEM_WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip dataOut_in : SInt<32>, flip aluOutput_in : SInt<32>, flip regWrite_in : UInt<1>, flip rs2Sel_in : UInt<5>, flip baseReg_in : SInt<32>, flip offSet_in : SInt<32>, flip MemRead_in : UInt<1>, flip memWrite_in : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, dataOut_out : SInt<32>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>, rs2Sel_out : UInt<5>, baseReg_out : SInt<32>, offSet_out : SInt<32>, MemRead_out : UInt<1>, memWrite_out : UInt<1>}
    
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 37:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem_WB.scala 38:29]
    reg reg_dataOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 39:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 40:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 41:35]
    reg reg_rs2Sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem_WB.scala 42:33]
    reg reg_baseReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 43:34]
    reg reg_offSet : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem_WB.scala 44:33]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 45:34]
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem_WB.scala 46:35]
    reg_memToReg <= io.memToReg_in @[Mem_WB.scala 49:22]
    reg_rd <= io.rd_in @[Mem_WB.scala 50:16]
    reg_dataOut <= io.dataOut_in @[Mem_WB.scala 51:21]
    reg_aluOutput <= io.aluOutput_in @[Mem_WB.scala 52:23]
    reg_regWrite <= io.regWrite_in @[Mem_WB.scala 53:22]
    reg_rs2Sel <= io.rs2Sel_in @[Mem_WB.scala 54:20]
    reg_baseReg <= io.baseReg_in @[Mem_WB.scala 55:21]
    reg_offSet <= io.offSet_in @[Mem_WB.scala 56:20]
    reg_memRead <= io.MemRead_in @[Mem_WB.scala 57:21]
    reg_memWrite <= io.memWrite_in @[Mem_WB.scala 58:22]
    io.memToReg_out <= reg_memToReg @[Mem_WB.scala 61:25]
    io.rd_out <= reg_rd @[Mem_WB.scala 62:19]
    io.dataOut_out <= reg_dataOut @[Mem_WB.scala 63:24]
    io.aluOutput_out <= reg_aluOutput @[Mem_WB.scala 64:26]
    io.regWrite_out <= reg_regWrite @[Mem_WB.scala 65:25]
    io.rs2Sel_out <= reg_rs2Sel @[Mem_WB.scala 66:23]
    io.baseReg_out <= reg_baseReg @[Mem_WB.scala 67:24]
    io.offSet_out <= reg_offSet @[Mem_WB.scala 68:23]
    io.MemRead_out <= reg_memRead @[Mem_WB.scala 69:24]
    io.memWrite_out <= reg_memWrite @[Mem_WB.scala 70:25]
    
  module ForwardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip EX_MEM_REGRD : UInt<5>, flip MEM_WB_REGRD : UInt<5>, flip ID_EX_REGRS1 : UInt<5>, flip ID_EX_REGRS2 : UInt<5>, flip EX_MEM_REGWR : UInt<1>, flip MEM_WB_REGWR : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[Frwd.scala 17:18]
    io.forward_b <= UInt<1>("h00") @[Frwd.scala 18:18]
    node _T = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 20:26]
    node _T_1 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 20:56]
    node _T_2 = and(_T, _T_1) @[Frwd.scala 20:37]
    node _T_3 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 20:91]
    node _T_4 = and(_T_2, _T_3) @[Frwd.scala 20:71]
    node _T_5 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 20:132]
    node _T_6 = and(_T_4, _T_5) @[Frwd.scala 20:112]
    when _T_6 : @[Frwd.scala 20:154]
      io.forward_a <= UInt<1>("h01") @[Frwd.scala 21:22]
      io.forward_b <= UInt<1>("h01") @[Frwd.scala 22:30]
      skip @[Frwd.scala 20:154]
    else : @[Frwd.scala 23:119]
      node _T_7 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 23:32]
      node _T_8 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 23:62]
      node _T_9 = and(_T_7, _T_8) @[Frwd.scala 23:43]
      node _T_10 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 23:97]
      node _T_11 = and(_T_9, _T_10) @[Frwd.scala 23:77]
      when _T_11 : @[Frwd.scala 23:119]
        io.forward_b <= UInt<1>("h01") @[Frwd.scala 24:30]
        skip @[Frwd.scala 23:119]
      else : @[Frwd.scala 25:119]
        node _T_12 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 25:32]
        node _T_13 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 25:62]
        node _T_14 = and(_T_12, _T_13) @[Frwd.scala 25:43]
        node _T_15 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 25:97]
        node _T_16 = and(_T_14, _T_15) @[Frwd.scala 25:77]
        when _T_16 : @[Frwd.scala 25:119]
          io.forward_a <= UInt<1>("h01") @[Frwd.scala 26:30]
          skip @[Frwd.scala 25:119]
    node _T_17 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 28:26]
    node _T_18 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 28:56]
    node _T_19 = and(_T_17, _T_18) @[Frwd.scala 28:37]
    node _T_20 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 28:91]
    node _T_21 = and(_T_19, _T_20) @[Frwd.scala 28:71]
    node _T_22 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 28:132]
    node _T_23 = and(_T_21, _T_22) @[Frwd.scala 28:112]
    when _T_23 : @[Frwd.scala 28:154]
      io.forward_a <= UInt<2>("h02") @[Frwd.scala 29:22]
      io.forward_b <= UInt<2>("h02") @[Frwd.scala 30:22]
      skip @[Frwd.scala 28:154]
    else : @[Frwd.scala 31:120]
      node _T_24 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 31:32]
      node _T_25 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 31:62]
      node _T_26 = and(_T_24, _T_25) @[Frwd.scala 31:43]
      node _T_27 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 31:98]
      node _T_28 = and(_T_26, _T_27) @[Frwd.scala 31:77]
      when _T_28 : @[Frwd.scala 31:120]
        io.forward_b <= UInt<2>("h02") @[Frwd.scala 32:22]
        skip @[Frwd.scala 31:120]
      else : @[Frwd.scala 33:118]
        node _T_29 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 33:32]
        node _T_30 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 33:62]
        node _T_31 = and(_T_29, _T_30) @[Frwd.scala 33:43]
        node _T_32 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 33:96]
        node _T_33 = and(_T_31, _T_32) @[Frwd.scala 33:77]
        when _T_33 : @[Frwd.scala 33:118]
          io.forward_a <= UInt<2>("h02") @[Frwd.scala 34:22]
          skip @[Frwd.scala 33:118]
    node _T_34 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 37:26]
    node _T_35 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 37:56]
    node _T_36 = and(_T_34, _T_35) @[Frwd.scala 37:37]
    node _T_37 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 37:90]
    node _T_38 = and(_T_36, _T_37) @[Frwd.scala 37:71]
    node _T_39 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 37:131]
    node _T_40 = and(_T_38, _T_39) @[Frwd.scala 37:111]
    when _T_40 : @[Frwd.scala 37:153]
      io.forward_a <= UInt<1>("h01") @[Frwd.scala 38:22]
      io.forward_b <= UInt<1>("h01") @[Frwd.scala 39:30]
      skip @[Frwd.scala 37:153]
    else : @[Frwd.scala 41:120]
      node _T_41 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 41:33]
      node _T_42 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 41:63]
      node _T_43 = and(_T_41, _T_42) @[Frwd.scala 41:44]
      node _T_44 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 41:98]
      node _T_45 = and(_T_43, _T_44) @[Frwd.scala 41:78]
      when _T_45 : @[Frwd.scala 41:120]
        io.forward_b <= UInt<1>("h01") @[Frwd.scala 42:22]
        skip @[Frwd.scala 41:120]
      else : @[Frwd.scala 44:119]
        node _T_46 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 44:33]
        node _T_47 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 44:63]
        node _T_48 = and(_T_46, _T_47) @[Frwd.scala 44:44]
        node _T_49 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 44:97]
        node _T_50 = and(_T_48, _T_49) @[Frwd.scala 44:78]
        when _T_50 : @[Frwd.scala 44:119]
          io.forward_a <= UInt<1>("h01") @[Frwd.scala 45:30]
          skip @[Frwd.scala 44:119]
    node _T_51 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 49:26]
    node _T_52 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 49:56]
    node _T_53 = and(_T_51, _T_52) @[Frwd.scala 49:37]
    node _T_54 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 49:91]
    node _T_55 = and(_T_53, _T_54) @[Frwd.scala 49:71]
    node _T_56 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 49:132]
    node _T_57 = and(_T_55, _T_56) @[Frwd.scala 49:112]
    when _T_57 : @[Frwd.scala 49:154]
      io.forward_a <= UInt<2>("h02") @[Frwd.scala 50:30]
      io.forward_b <= UInt<2>("h02") @[Frwd.scala 51:30]
      skip @[Frwd.scala 49:154]
    else : @[Frwd.scala 53:123]
      node _T_58 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 53:36]
      node _T_59 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 53:66]
      node _T_60 = and(_T_58, _T_59) @[Frwd.scala 53:47]
      node _T_61 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 53:101]
      node _T_62 = and(_T_60, _T_61) @[Frwd.scala 53:81]
      when _T_62 : @[Frwd.scala 53:123]
        io.forward_b <= UInt<2>("h02") @[Frwd.scala 54:30]
        skip @[Frwd.scala 53:123]
      else : @[Frwd.scala 56:122]
        node _T_63 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 56:36]
        node _T_64 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 56:66]
        node _T_65 = and(_T_63, _T_64) @[Frwd.scala 56:47]
        node _T_66 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 56:100]
        node _T_67 = and(_T_65, _T_66) @[Frwd.scala 56:81]
        when _T_67 : @[Frwd.scala 56:122]
          io.forward_a <= UInt<2>("h02") @[Frwd.scala 57:30]
          skip @[Frwd.scala 56:122]
    node _T_68 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 60:26]
    node _T_69 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 60:56]
    node _T_70 = and(_T_68, _T_69) @[Frwd.scala 60:37]
    node _T_71 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 60:93]
    node _T_72 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 60:125]
    node _T_73 = and(_T_71, _T_72) @[Frwd.scala 60:105]
    node _T_74 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 60:161]
    node _T_75 = and(_T_73, _T_74) @[Frwd.scala 60:141]
    node _T_76 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 60:202]
    node _T_77 = and(_T_75, _T_76) @[Frwd.scala 60:182]
    node _T_78 = not(_T_77) @[Frwd.scala 60:74]
    node _T_79 = and(_T_70, _T_78) @[Frwd.scala 60:71]
    node _T_80 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 60:244]
    node _T_81 = and(_T_79, _T_80) @[Frwd.scala 60:224]
    node _T_82 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 60:285]
    node _T_83 = and(_T_81, _T_82) @[Frwd.scala 60:265]
    when _T_83 : @[Frwd.scala 60:307]
      io.forward_a <= UInt<2>("h02") @[Frwd.scala 61:22]
      io.forward_b <= UInt<2>("h02") @[Frwd.scala 62:22]
      skip @[Frwd.scala 60:307]
    else : @[Frwd.scala 63:231]
      node _T_84 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 63:32]
      node _T_85 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 63:62]
      node _T_86 = and(_T_84, _T_85) @[Frwd.scala 63:43]
      node _T_87 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 63:99]
      node _T_88 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 63:131]
      node _T_89 = and(_T_87, _T_88) @[Frwd.scala 63:111]
      node _T_90 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 63:167]
      node _T_91 = and(_T_89, _T_90) @[Frwd.scala 63:147]
      node _T_92 = not(_T_91) @[Frwd.scala 63:80]
      node _T_93 = and(_T_86, _T_92) @[Frwd.scala 63:77]
      node _T_94 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 63:209]
      node _T_95 = and(_T_93, _T_94) @[Frwd.scala 63:189]
      when _T_95 : @[Frwd.scala 63:231]
        io.forward_b <= UInt<2>("h02") @[Frwd.scala 64:22]
        skip @[Frwd.scala 63:231]
      else : @[Frwd.scala 65:232]
        node _T_96 = eq(io.MEM_WB_REGWR, UInt<1>("h01")) @[Frwd.scala 65:32]
        node _T_97 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[Frwd.scala 65:62]
        node _T_98 = and(_T_96, _T_97) @[Frwd.scala 65:43]
        node _T_99 = eq(io.EX_MEM_REGWR, UInt<1>("h01")) @[Frwd.scala 65:99]
        node _T_100 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[Frwd.scala 65:131]
        node _T_101 = and(_T_99, _T_100) @[Frwd.scala 65:111]
        node _T_102 = eq(io.EX_MEM_REGRD, io.ID_EX_REGRS2) @[Frwd.scala 65:167]
        node _T_103 = and(_T_101, _T_102) @[Frwd.scala 65:147]
        node _T_104 = not(_T_103) @[Frwd.scala 65:80]
        node _T_105 = and(_T_98, _T_104) @[Frwd.scala 65:77]
        node _T_106 = eq(io.MEM_WB_REGRD, io.ID_EX_REGRS1) @[Frwd.scala 65:210]
        node _T_107 = and(_T_105, _T_106) @[Frwd.scala 65:190]
        when _T_107 : @[Frwd.scala 65:232]
          io.forward_a <= UInt<2>("h02") @[Frwd.scala 66:18]
          skip @[Frwd.scala 65:232]
    
  module HazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_INST : UInt<32>, flip ID_EX_MEMREAD : UInt<1>, flip ID_EX_REGRD : UInt<5>, flip pc_in : SInt<32>, flip current_pc : SInt<32>, inst_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, inst_out : UInt<32>, pc_out : SInt<32>, current_pc_out : SInt<32>}
    
    node rs1_sel = bits(io.IF_ID_INST, 19, 15) @[HazardD.scala 19:30]
    node rs2_sel = bits(io.IF_ID_INST, 24, 20) @[HazardD.scala 20:30]
    node _T = eq(io.ID_EX_MEMREAD, UInt<1>("h01")) @[HazardD.scala 21:25]
    node _T_1 = eq(io.ID_EX_REGRD, rs1_sel) @[HazardD.scala 21:56]
    node _T_2 = eq(io.ID_EX_REGRD, rs2_sel) @[HazardD.scala 21:88]
    node _T_3 = or(_T_1, _T_2) @[HazardD.scala 21:69]
    node _T_4 = and(_T, _T_3) @[HazardD.scala 21:36]
    when _T_4 : @[HazardD.scala 21:103]
      io.inst_forward <= UInt<1>("h01") @[HazardD.scala 22:23]
      io.pc_forward <= UInt<1>("h01") @[HazardD.scala 23:21]
      io.ctrl_forward <= UInt<1>("h01") @[HazardD.scala 24:23]
      io.inst_out <= io.IF_ID_INST @[HazardD.scala 25:19]
      io.pc_out <= io.pc_in @[HazardD.scala 26:17]
      io.current_pc_out <= io.current_pc @[HazardD.scala 27:25]
      skip @[HazardD.scala 21:103]
    else : @[HazardD.scala 29:16]
      io.inst_forward <= UInt<1>("h00") @[HazardD.scala 30:21]
      io.pc_forward <= UInt<1>("h00") @[HazardD.scala 31:19]
      io.ctrl_forward <= UInt<1>("h00") @[HazardD.scala 32:21]
      io.inst_out <= io.IF_ID_INST @[HazardD.scala 33:17]
      io.pc_out <= io.pc_in @[HazardD.scala 34:15]
      io.current_pc_out <= io.current_pc @[HazardD.scala 35:23]
      skip @[HazardD.scala 29:16]
    
  module BranchLogic : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_rs1 : SInt<32>, flip in_rs2 : SInt<32>, flip in_func3 : UInt<3>, output : UInt<1>}
    
    node _T = eq(io.in_func3, UInt<1>("h00")) @[BranchL.scala 13:20]
    when _T : @[BranchL.scala 13:34]
      node _T_1 = eq(io.in_rs1, io.in_rs2) @[BranchL.scala 15:20]
      when _T_1 : @[BranchL.scala 15:35]
        io.output <= UInt<1>("h01") @[BranchL.scala 16:17]
        skip @[BranchL.scala 15:35]
      else : @[BranchL.scala 17:18]
        io.output <= UInt<1>("h00") @[BranchL.scala 18:17]
        skip @[BranchL.scala 17:18]
      skip @[BranchL.scala 13:34]
    else : @[BranchL.scala 20:41]
      node _T_2 = eq(io.in_func3, UInt<1>("h01")) @[BranchL.scala 20:27]
      when _T_2 : @[BranchL.scala 20:41]
        node _T_3 = neq(io.in_rs1, io.in_rs2) @[BranchL.scala 22:20]
        when _T_3 : @[BranchL.scala 22:35]
          io.output <= UInt<1>("h01") @[BranchL.scala 23:17]
          skip @[BranchL.scala 22:35]
        else : @[BranchL.scala 24:18]
          io.output <= UInt<1>("h00") @[BranchL.scala 25:17]
          skip @[BranchL.scala 24:18]
        skip @[BranchL.scala 20:41]
      else : @[BranchL.scala 27:41]
        node _T_4 = eq(io.in_func3, UInt<3>("h04")) @[BranchL.scala 27:27]
        when _T_4 : @[BranchL.scala 27:41]
          node _T_5 = lt(io.in_rs1, io.in_rs2) @[BranchL.scala 29:20]
          when _T_5 : @[BranchL.scala 29:33]
            io.output <= UInt<1>("h01") @[BranchL.scala 30:17]
            skip @[BranchL.scala 29:33]
          else : @[BranchL.scala 31:18]
            io.output <= UInt<1>("h00") @[BranchL.scala 32:17]
            skip @[BranchL.scala 31:18]
          skip @[BranchL.scala 27:41]
        else : @[BranchL.scala 34:41]
          node _T_6 = eq(io.in_func3, UInt<3>("h05")) @[BranchL.scala 34:27]
          when _T_6 : @[BranchL.scala 34:41]
            node _T_7 = geq(io.in_rs1, io.in_rs2) @[BranchL.scala 36:20]
            when _T_7 : @[BranchL.scala 36:34]
              io.output <= UInt<1>("h01") @[BranchL.scala 37:17]
              skip @[BranchL.scala 36:34]
            else : @[BranchL.scala 38:18]
              io.output <= UInt<1>("h00") @[BranchL.scala 39:17]
              skip @[BranchL.scala 38:18]
            skip @[BranchL.scala 34:41]
          else : @[BranchL.scala 41:41]
            node _T_8 = eq(io.in_func3, UInt<3>("h06")) @[BranchL.scala 41:27]
            when _T_8 : @[BranchL.scala 41:41]
              node _T_9 = asUInt(io.in_rs1) @[BranchL.scala 43:20]
              node _T_10 = asUInt(io.in_rs2) @[BranchL.scala 43:39]
              node _T_11 = lt(_T_9, _T_10) @[BranchL.scala 43:27]
              when _T_11 : @[BranchL.scala 43:47]
                io.output <= UInt<1>("h01") @[BranchL.scala 44:17]
                skip @[BranchL.scala 43:47]
              else : @[BranchL.scala 45:18]
                io.output <= UInt<1>("h00") @[BranchL.scala 46:17]
                skip @[BranchL.scala 45:18]
              skip @[BranchL.scala 41:41]
            else : @[BranchL.scala 48:41]
              node _T_12 = eq(io.in_func3, UInt<3>("h07")) @[BranchL.scala 48:27]
              when _T_12 : @[BranchL.scala 48:41]
                node _T_13 = asUInt(io.in_rs1) @[BranchL.scala 50:20]
                node _T_14 = asUInt(io.in_rs2) @[BranchL.scala 50:40]
                node _T_15 = geq(_T_13, _T_14) @[BranchL.scala 50:27]
                when _T_15 : @[BranchL.scala 50:48]
                  io.output <= UInt<1>("h01") @[BranchL.scala 51:17]
                  skip @[BranchL.scala 50:48]
                else : @[BranchL.scala 52:18]
                  io.output <= UInt<1>("h00") @[BranchL.scala 53:17]
                  skip @[BranchL.scala 52:18]
                skip @[BranchL.scala 48:41]
              else : @[BranchL.scala 55:16]
                io.output <= UInt<1>("h00") @[BranchL.scala 56:15]
                skip @[BranchL.scala 55:16]
    
  module DecodeBranchForward : 
    input clock : Clock
    input reset : Reset
    output io : {flip ID_EX_REGRD : UInt<5>, flip ID_EX_MEMRD : UInt<1>, flip EX_MEM_REGRD : UInt<5>, flip EX_MEM_MEMRD : UInt<1>, flip MEM_WB_REGRD : UInt<5>, flip MEM_WB_MEMRD : UInt<1>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip ctrl_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[BranchF.scala 19:20]
    io.forward_rs2 <= UInt<1>("h00") @[BranchF.scala 20:20]
    node _T = eq(io.ctrl_branch, UInt<1>("h01")) @[BranchF.scala 21:21]
    when _T : @[BranchF.scala 21:30]
      node _T_1 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 23:23]
      node _T_2 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BranchF.scala 23:56]
      node _T_3 = and(_T_1, _T_2) @[BranchF.scala 23:38]
      node _T_4 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 23:83]
      node _T_5 = and(_T_3, _T_4) @[BranchF.scala 23:64]
      node _T_6 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 23:118]
      node _T_7 = and(_T_5, _T_6) @[BranchF.scala 23:99]
      when _T_7 : @[BranchF.scala 23:135]
        io.forward_rs1 <= UInt<1>("h01") @[BranchF.scala 24:20]
        io.forward_rs2 <= UInt<1>("h01") @[BranchF.scala 25:20]
        skip @[BranchF.scala 23:135]
      else : @[BranchF.scala 26:107]
        node _T_8 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 26:30]
        node _T_9 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BranchF.scala 26:63]
        node _T_10 = and(_T_8, _T_9) @[BranchF.scala 26:45]
        node _T_11 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 26:90]
        node _T_12 = and(_T_10, _T_11) @[BranchF.scala 26:71]
        when _T_12 : @[BranchF.scala 26:107]
          io.forward_rs1 <= UInt<1>("h01") @[BranchF.scala 27:20]
          skip @[BranchF.scala 26:107]
        else : @[BranchF.scala 28:107]
          node _T_13 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 28:30]
          node _T_14 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BranchF.scala 28:63]
          node _T_15 = and(_T_13, _T_14) @[BranchF.scala 28:45]
          node _T_16 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 28:90]
          node _T_17 = and(_T_15, _T_16) @[BranchF.scala 28:71]
          when _T_17 : @[BranchF.scala 28:107]
            io.forward_rs2 <= UInt<1>("h01") @[BranchF.scala 29:20]
            skip @[BranchF.scala 28:107]
      node _T_18 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 33:24]
      node _T_19 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 33:58]
      node _T_20 = and(_T_18, _T_19) @[BranchF.scala 33:39]
      node _T_21 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 34:23]
      node _T_22 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 34:58]
      node _T_23 = and(_T_21, _T_22) @[BranchF.scala 34:39]
      node _T_24 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 34:93]
      node _T_25 = and(_T_23, _T_24) @[BranchF.scala 34:74]
      node _T_26 = not(_T_25) @[BranchF.scala 34:5]
      node _T_27 = and(_T_20, _T_26) @[BranchF.scala 33:66]
      node _T_28 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 35:22]
      node _T_29 = and(_T_27, _T_28) @[BranchF.scala 34:110]
      node _T_30 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 35:58]
      node _T_31 = and(_T_29, _T_30) @[BranchF.scala 35:38]
      when _T_31 : @[BranchF.scala 35:75]
        io.forward_rs1 <= UInt<2>("h02") @[BranchF.scala 37:20]
        io.forward_rs2 <= UInt<2>("h02") @[BranchF.scala 38:20]
        skip @[BranchF.scala 35:75]
      else : @[BranchF.scala 42:39]
        node _T_32 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 40:31]
        node _T_33 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 40:65]
        node _T_34 = and(_T_32, _T_33) @[BranchF.scala 40:46]
        node _T_35 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 41:23]
        node _T_36 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 41:58]
        node _T_37 = and(_T_35, _T_36) @[BranchF.scala 41:39]
        node _T_38 = not(_T_37) @[BranchF.scala 41:5]
        node _T_39 = and(_T_34, _T_38) @[BranchF.scala 40:73]
        node _T_40 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 42:22]
        node _T_41 = and(_T_39, _T_40) @[BranchF.scala 41:75]
        when _T_41 : @[BranchF.scala 42:39]
          io.forward_rs2 <= UInt<2>("h02") @[BranchF.scala 44:20]
          skip @[BranchF.scala 42:39]
        else : @[BranchF.scala 48:39]
          node _T_42 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 46:31]
          node _T_43 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 46:65]
          node _T_44 = and(_T_42, _T_43) @[BranchF.scala 46:46]
          node _T_45 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 47:23]
          node _T_46 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 47:58]
          node _T_47 = and(_T_45, _T_46) @[BranchF.scala 47:39]
          node _T_48 = not(_T_47) @[BranchF.scala 47:5]
          node _T_49 = and(_T_44, _T_48) @[BranchF.scala 46:73]
          node _T_50 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 48:22]
          node _T_51 = and(_T_49, _T_50) @[BranchF.scala 47:75]
          when _T_51 : @[BranchF.scala 48:39]
            io.forward_rs1 <= UInt<2>("h02") @[BranchF.scala 50:20]
            skip @[BranchF.scala 48:39]
          else : @[BranchF.scala 54:75]
            node _T_52 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 52:31]
            node _T_53 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 52:65]
            node _T_54 = and(_T_52, _T_53) @[BranchF.scala 52:46]
            node _T_55 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 53:23]
            node _T_56 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 53:58]
            node _T_57 = and(_T_55, _T_56) @[BranchF.scala 53:39]
            node _T_58 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 53:93]
            node _T_59 = and(_T_57, _T_58) @[BranchF.scala 53:74]
            node _T_60 = not(_T_59) @[BranchF.scala 53:5]
            node _T_61 = and(_T_54, _T_60) @[BranchF.scala 52:73]
            node _T_62 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 54:22]
            node _T_63 = and(_T_61, _T_62) @[BranchF.scala 53:110]
            node _T_64 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 54:58]
            node _T_65 = and(_T_63, _T_64) @[BranchF.scala 54:38]
            when _T_65 : @[BranchF.scala 54:75]
              io.forward_rs1 <= UInt<3>("h04") @[BranchF.scala 56:20]
              io.forward_rs2 <= UInt<3>("h04") @[BranchF.scala 57:20]
              skip @[BranchF.scala 54:75]
            else : @[BranchF.scala 61:39]
              node _T_66 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 59:31]
              node _T_67 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 59:65]
              node _T_68 = and(_T_66, _T_67) @[BranchF.scala 59:46]
              node _T_69 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 60:23]
              node _T_70 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 60:58]
              node _T_71 = and(_T_69, _T_70) @[BranchF.scala 60:39]
              node _T_72 = not(_T_71) @[BranchF.scala 60:5]
              node _T_73 = and(_T_68, _T_72) @[BranchF.scala 59:73]
              node _T_74 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 61:22]
              node _T_75 = and(_T_73, _T_74) @[BranchF.scala 60:75]
              when _T_75 : @[BranchF.scala 61:39]
                io.forward_rs2 <= UInt<3>("h04") @[BranchF.scala 63:20]
                skip @[BranchF.scala 61:39]
              else : @[BranchF.scala 67:39]
                node _T_76 = eq(io.ctrl_branch, UInt<1>("h01")) @[BranchF.scala 65:30]
                node _T_77 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 65:57]
                node _T_78 = and(_T_76, _T_77) @[BranchF.scala 65:38]
                node _T_79 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 65:91]
                node _T_80 = and(_T_78, _T_79) @[BranchF.scala 65:72]
                node _T_81 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 66:23]
                node _T_82 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 66:58]
                node _T_83 = and(_T_81, _T_82) @[BranchF.scala 66:39]
                node _T_84 = not(_T_83) @[BranchF.scala 66:5]
                node _T_85 = and(_T_80, _T_84) @[BranchF.scala 65:99]
                node _T_86 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 67:22]
                node _T_87 = and(_T_85, _T_86) @[BranchF.scala 66:75]
                when _T_87 : @[BranchF.scala 67:39]
                  io.forward_rs1 <= UInt<3>("h04") @[BranchF.scala 69:20]
                  skip @[BranchF.scala 67:39]
      node _T_88 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 74:24]
      node _T_89 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 74:58]
      node _T_90 = and(_T_88, _T_89) @[BranchF.scala 74:39]
      node _T_91 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 76:23]
      node _T_92 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 76:58]
      node _T_93 = and(_T_91, _T_92) @[BranchF.scala 76:39]
      node _T_94 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 76:93]
      node _T_95 = and(_T_93, _T_94) @[BranchF.scala 76:74]
      node _T_96 = not(_T_95) @[BranchF.scala 76:5]
      node _T_97 = and(_T_90, _T_96) @[BranchF.scala 74:66]
      node _T_98 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 78:24]
      node _T_99 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 78:60]
      node _T_100 = and(_T_98, _T_99) @[BranchF.scala 78:40]
      node _T_101 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 78:96]
      node _T_102 = and(_T_100, _T_101) @[BranchF.scala 78:76]
      node _T_103 = not(_T_102) @[BranchF.scala 78:5]
      node _T_104 = and(_T_97, _T_103) @[BranchF.scala 76:110]
      node _T_105 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BranchF.scala 79:22]
      node _T_106 = and(_T_104, _T_105) @[BranchF.scala 78:113]
      node _T_107 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BranchF.scala 79:58]
      node _T_108 = and(_T_106, _T_107) @[BranchF.scala 79:38]
      when _T_108 : @[BranchF.scala 79:75]
        io.forward_rs1 <= UInt<2>("h03") @[BranchF.scala 81:20]
        io.forward_rs2 <= UInt<2>("h03") @[BranchF.scala 82:20]
        skip @[BranchF.scala 79:75]
      else : @[BranchF.scala 90:41]
        node _T_109 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 85:31]
        node _T_110 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 85:65]
        node _T_111 = and(_T_109, _T_110) @[BranchF.scala 85:46]
        node _T_112 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 87:25]
        node _T_113 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 87:60]
        node _T_114 = and(_T_112, _T_113) @[BranchF.scala 87:41]
        node _T_115 = not(_T_114) @[BranchF.scala 87:7]
        node _T_116 = and(_T_111, _T_115) @[BranchF.scala 85:73]
        node _T_117 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 89:26]
        node _T_118 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 89:62]
        node _T_119 = and(_T_117, _T_118) @[BranchF.scala 89:42]
        node _T_120 = not(_T_119) @[BranchF.scala 89:7]
        node _T_121 = and(_T_116, _T_120) @[BranchF.scala 87:77]
        node _T_122 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BranchF.scala 90:24]
        node _T_123 = and(_T_121, _T_122) @[BranchF.scala 89:79]
        when _T_123 : @[BranchF.scala 90:41]
          io.forward_rs2 <= UInt<2>("h03") @[BranchF.scala 92:22]
          skip @[BranchF.scala 90:41]
        else : @[BranchF.scala 100:41]
          node _T_124 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 95:31]
          node _T_125 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 95:65]
          node _T_126 = and(_T_124, _T_125) @[BranchF.scala 95:46]
          node _T_127 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 97:25]
          node _T_128 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 97:60]
          node _T_129 = and(_T_127, _T_128) @[BranchF.scala 97:41]
          node _T_130 = not(_T_129) @[BranchF.scala 97:7]
          node _T_131 = and(_T_126, _T_130) @[BranchF.scala 95:73]
          node _T_132 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 99:26]
          node _T_133 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 99:62]
          node _T_134 = and(_T_132, _T_133) @[BranchF.scala 99:42]
          node _T_135 = not(_T_134) @[BranchF.scala 99:7]
          node _T_136 = and(_T_131, _T_135) @[BranchF.scala 97:77]
          node _T_137 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BranchF.scala 100:24]
          node _T_138 = and(_T_136, _T_137) @[BranchF.scala 99:79]
          when _T_138 : @[BranchF.scala 100:41]
            io.forward_rs1 <= UInt<2>("h03") @[BranchF.scala 102:22]
            skip @[BranchF.scala 100:41]
          else : @[BranchF.scala 109:75]
            node _T_139 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 104:33]
            node _T_140 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 104:67]
            node _T_141 = and(_T_139, _T_140) @[BranchF.scala 104:48]
            node _T_142 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 106:23]
            node _T_143 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 106:58]
            node _T_144 = and(_T_142, _T_143) @[BranchF.scala 106:39]
            node _T_145 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 106:93]
            node _T_146 = and(_T_144, _T_145) @[BranchF.scala 106:74]
            node _T_147 = not(_T_146) @[BranchF.scala 106:5]
            node _T_148 = and(_T_141, _T_147) @[BranchF.scala 104:75]
            node _T_149 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 108:24]
            node _T_150 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 108:60]
            node _T_151 = and(_T_149, _T_150) @[BranchF.scala 108:40]
            node _T_152 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 108:96]
            node _T_153 = and(_T_151, _T_152) @[BranchF.scala 108:76]
            node _T_154 = not(_T_153) @[BranchF.scala 108:5]
            node _T_155 = and(_T_148, _T_154) @[BranchF.scala 106:110]
            node _T_156 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BranchF.scala 109:22]
            node _T_157 = and(_T_155, _T_156) @[BranchF.scala 108:113]
            node _T_158 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BranchF.scala 109:58]
            node _T_159 = and(_T_157, _T_158) @[BranchF.scala 109:38]
            when _T_159 : @[BranchF.scala 109:75]
              io.forward_rs1 <= UInt<3>("h05") @[BranchF.scala 111:20]
              io.forward_rs2 <= UInt<3>("h05") @[BranchF.scala 112:20]
              skip @[BranchF.scala 109:75]
            else : @[BranchF.scala 120:41]
              node _T_160 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 115:31]
              node _T_161 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 115:65]
              node _T_162 = and(_T_160, _T_161) @[BranchF.scala 115:46]
              node _T_163 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 117:25]
              node _T_164 = eq(io.ID_EX_REGRD, io.rs2_sel) @[BranchF.scala 117:60]
              node _T_165 = and(_T_163, _T_164) @[BranchF.scala 117:41]
              node _T_166 = not(_T_165) @[BranchF.scala 117:7]
              node _T_167 = and(_T_162, _T_166) @[BranchF.scala 115:73]
              node _T_168 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 119:26]
              node _T_169 = eq(io.EX_MEM_REGRD, io.rs2_sel) @[BranchF.scala 119:62]
              node _T_170 = and(_T_168, _T_169) @[BranchF.scala 119:42]
              node _T_171 = not(_T_170) @[BranchF.scala 119:7]
              node _T_172 = and(_T_167, _T_171) @[BranchF.scala 117:77]
              node _T_173 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[BranchF.scala 120:24]
              node _T_174 = and(_T_172, _T_173) @[BranchF.scala 119:79]
              when _T_174 : @[BranchF.scala 120:41]
                io.forward_rs2 <= UInt<3>("h05") @[BranchF.scala 122:22]
                skip @[BranchF.scala 120:41]
              else : @[BranchF.scala 130:41]
                node _T_175 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 125:31]
                node _T_176 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 125:65]
                node _T_177 = and(_T_175, _T_176) @[BranchF.scala 125:46]
                node _T_178 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 127:25]
                node _T_179 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 127:60]
                node _T_180 = and(_T_178, _T_179) @[BranchF.scala 127:41]
                node _T_181 = not(_T_180) @[BranchF.scala 127:7]
                node _T_182 = and(_T_177, _T_181) @[BranchF.scala 125:73]
                node _T_183 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 129:26]
                node _T_184 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 129:62]
                node _T_185 = and(_T_183, _T_184) @[BranchF.scala 129:42]
                node _T_186 = not(_T_185) @[BranchF.scala 129:7]
                node _T_187 = and(_T_182, _T_186) @[BranchF.scala 127:77]
                node _T_188 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BranchF.scala 130:24]
                node _T_189 = and(_T_187, _T_188) @[BranchF.scala 129:78]
                when _T_189 : @[BranchF.scala 130:41]
                  io.forward_rs1 <= UInt<3>("h05") @[BranchF.scala 132:22]
                  skip @[BranchF.scala 130:41]
      skip @[BranchF.scala 21:30]
    else : @[BranchF.scala 137:35]
      node _T_190 = eq(io.ctrl_branch, UInt<1>("h00")) @[BranchF.scala 137:26]
      when _T_190 : @[BranchF.scala 137:35]
        node _T_191 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 139:29]
        node _T_192 = neq(io.ID_EX_MEMRD, UInt<1>("h01")) @[BranchF.scala 139:62]
        node _T_193 = and(_T_191, _T_192) @[BranchF.scala 139:44]
        node _T_194 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 139:89]
        node _T_195 = and(_T_193, _T_194) @[BranchF.scala 139:70]
        when _T_195 : @[BranchF.scala 139:109]
          io.forward_rs1 <= UInt<3>("h06") @[BranchF.scala 140:26]
          skip @[BranchF.scala 139:109]
        node _T_196 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 144:30]
        node _T_197 = neq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 144:64]
        node _T_198 = and(_T_196, _T_197) @[BranchF.scala 144:45]
        node _T_199 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 145:29]
        node _T_200 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 145:64]
        node _T_201 = and(_T_199, _T_200) @[BranchF.scala 145:45]
        node _T_202 = not(_T_201) @[BranchF.scala 145:11]
        node _T_203 = and(_T_198, _T_202) @[BranchF.scala 144:72]
        node _T_204 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 146:28]
        node _T_205 = and(_T_203, _T_204) @[BranchF.scala 145:81]
        when _T_205 : @[BranchF.scala 146:45]
          io.forward_rs1 <= UInt<3>("h07") @[BranchF.scala 148:26]
          skip @[BranchF.scala 146:45]
        else : @[BranchF.scala 153:47]
          node _T_206 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 151:37]
          node _T_207 = eq(io.EX_MEM_MEMRD, UInt<1>("h01")) @[BranchF.scala 151:71]
          node _T_208 = and(_T_206, _T_207) @[BranchF.scala 151:52]
          node _T_209 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 152:31]
          node _T_210 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 152:66]
          node _T_211 = and(_T_209, _T_210) @[BranchF.scala 152:47]
          node _T_212 = not(_T_211) @[BranchF.scala 152:13]
          node _T_213 = and(_T_208, _T_212) @[BranchF.scala 151:79]
          node _T_214 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 153:30]
          node _T_215 = and(_T_213, _T_214) @[BranchF.scala 152:83]
          when _T_215 : @[BranchF.scala 153:47]
            io.forward_rs1 <= UInt<4>("h09") @[BranchF.scala 155:28]
            skip @[BranchF.scala 153:47]
        node _T_216 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 161:30]
        node _T_217 = neq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 161:64]
        node _T_218 = and(_T_216, _T_217) @[BranchF.scala 161:45]
        node _T_219 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 163:29]
        node _T_220 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 163:64]
        node _T_221 = and(_T_219, _T_220) @[BranchF.scala 163:45]
        node _T_222 = not(_T_221) @[BranchF.scala 163:11]
        node _T_223 = and(_T_218, _T_222) @[BranchF.scala 161:72]
        node _T_224 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 165:30]
        node _T_225 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 165:66]
        node _T_226 = and(_T_224, _T_225) @[BranchF.scala 165:46]
        node _T_227 = not(_T_226) @[BranchF.scala 165:11]
        node _T_228 = and(_T_223, _T_227) @[BranchF.scala 163:81]
        node _T_229 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BranchF.scala 166:28]
        node _T_230 = and(_T_228, _T_229) @[BranchF.scala 165:83]
        when _T_230 : @[BranchF.scala 166:45]
          io.forward_rs1 <= UInt<4>("h08") @[BranchF.scala 168:26]
          skip @[BranchF.scala 166:45]
        else : @[BranchF.scala 176:45]
          node _T_231 = neq(io.MEM_WB_REGRD, UInt<1>("h00")) @[BranchF.scala 171:38]
          node _T_232 = eq(io.MEM_WB_MEMRD, UInt<1>("h01")) @[BranchF.scala 171:72]
          node _T_233 = and(_T_231, _T_232) @[BranchF.scala 171:53]
          node _T_234 = neq(io.ID_EX_REGRD, UInt<1>("h00")) @[BranchF.scala 173:29]
          node _T_235 = eq(io.ID_EX_REGRD, io.rs1_sel) @[BranchF.scala 173:64]
          node _T_236 = and(_T_234, _T_235) @[BranchF.scala 173:45]
          node _T_237 = not(_T_236) @[BranchF.scala 173:11]
          node _T_238 = and(_T_233, _T_237) @[BranchF.scala 171:80]
          node _T_239 = neq(io.EX_MEM_REGRD, UInt<1>("h00")) @[BranchF.scala 175:30]
          node _T_240 = eq(io.EX_MEM_REGRD, io.rs1_sel) @[BranchF.scala 175:66]
          node _T_241 = and(_T_239, _T_240) @[BranchF.scala 175:46]
          node _T_242 = not(_T_241) @[BranchF.scala 175:11]
          node _T_243 = and(_T_238, _T_242) @[BranchF.scala 173:81]
          node _T_244 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[BranchF.scala 176:28]
          node _T_245 = and(_T_243, _T_244) @[BranchF.scala 175:83]
          when _T_245 : @[BranchF.scala 176:45]
            io.forward_rs1 <= UInt<4>("h0a") @[BranchF.scala 178:26]
            skip @[BranchF.scala 176:45]
        skip @[BranchF.scala 137:35]
    
  module StructuralDetector : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip MEM_WB_regWr : UInt<1>, flip MEM_WB_REGRD : UInt<5>, fwd_rs1 : UInt<1>, fwd_rs2 : UInt<1>}
    
    node _T = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[STD.scala 13:24]
    node _T_1 = eq(io.MEM_WB_REGRD, io.rs1_sel) @[STD.scala 13:52]
    node _T_2 = and(_T, _T_1) @[STD.scala 13:32]
    when _T_2 : @[STD.scala 13:68]
      io.fwd_rs1 <= UInt<1>("h01") @[STD.scala 14:16]
      skip @[STD.scala 13:68]
    else : @[STD.scala 15:16]
      io.fwd_rs1 <= UInt<1>("h00") @[STD.scala 16:16]
      skip @[STD.scala 15:16]
    node _T_3 = eq(io.MEM_WB_regWr, UInt<1>("h01")) @[STD.scala 18:24]
    node _T_4 = eq(io.MEM_WB_REGRD, io.rs2_sel) @[STD.scala 18:51]
    node _T_5 = and(_T_3, _T_4) @[STD.scala 18:32]
    when _T_5 : @[STD.scala 18:67]
      io.fwd_rs2 <= UInt<1>("h01") @[STD.scala 19:16]
      skip @[STD.scala 18:67]
    else : @[STD.scala 20:16]
      io.fwd_rs2 <= UInt<1>("h00") @[STD.scala 21:16]
      skip @[STD.scala 20:16]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>, addr : UInt<10>}
    
    io.out <= UInt<1>("h00") @[top.scala 14:11]
    inst pc of pccounter @[top.scala 16:18]
    pc.clock <= clock
    pc.reset <= reset
    inst data_mem of datamem @[top.scala 17:24]
    data_mem.clock <= clock
    data_mem.reset <= reset
    inst inst_mem of InstMem @[top.scala 18:25]
    inst_mem.clock <= clock
    inst_mem.reset <= reset
    inst reg_file of reg @[top.scala 19:24]
    reg_file.clock <= clock
    reg_file.reset <= reset
    inst controler of controler @[top.scala 20:27]
    controler.clock <= clock
    controler.reset <= reset
    inst alu of ALU4 @[top.scala 21:20]
    alu.clock <= clock
    alu.reset <= reset
    inst imm of ImmdValGen1 @[top.scala 23:20]
    imm.clock <= clock
    imm.reset <= reset
    inst Jalr of jalr @[top.scala 24:22]
    Jalr.clock <= clock
    Jalr.reset <= reset
    inst alu_cnt of alu_controler @[top.scala 25:24]
    alu_cnt.clock <= clock
    alu_cnt.reset <= reset
    inst IF of Inst_fetch @[top.scala 28:18]
    IF.clock <= clock
    IF.reset <= reset
    inst ID of ID @[top.scala 29:19]
    ID.clock <= clock
    ID.reset <= reset
    inst EX of EX @[top.scala 30:19]
    EX.clock <= clock
    EX.reset <= reset
    inst Mem_wb of MEM_WB @[top.scala 31:22]
    Mem_wb.clock <= clock
    Mem_wb.reset <= reset
    inst Forward_U of ForwardUnit @[top.scala 34:25]
    Forward_U.clock <= clock
    Forward_U.reset <= reset
    inst HD of HazardDetection @[top.scala 35:18]
    HD.clock <= clock
    HD.reset <= reset
    inst BL of BranchLogic @[top.scala 36:18]
    BL.clock <= clock
    BL.reset <= reset
    inst BF of DecodeBranchForward @[top.scala 37:18]
    BF.clock <= clock
    BF.reset <= reset
    inst SD of StructuralDetector @[top.scala 38:18]
    SD.clock <= clock
    SD.reset <= reset
    Forward_U.io.EX_MEM_REGRD <= EX.io.rd_out @[top.scala 40:30]
    Forward_U.io.MEM_WB_REGRD <= Mem_wb.io.rd_out @[top.scala 41:30]
    Forward_U.io.ID_EX_REGRS1 <= ID.io.rs1Ins_out @[top.scala 42:30]
    Forward_U.io.ID_EX_REGRS2 <= ID.io.rs2Ins_out @[top.scala 43:30]
    Forward_U.io.EX_MEM_REGWR <= EX.io.regWrite_out @[top.scala 44:30]
    Forward_U.io.MEM_WB_REGWR <= Mem_wb.io.regWrite_out @[top.scala 45:30]
    pc.io.addr <= pc.io.pc_4 @[top.scala 47:15]
    node _inst_mem_io_addr_T = bits(pc.io.pc_out, 11, 2) @[top.scala 51:35]
    inst_mem.io.addr <= _inst_mem_io_addr_T @[top.scala 51:21]
    IF.io.pc_in <= pc.io.pc_out @[top.scala 54:16]
    IF.io.pc4_in <= pc.io.pc_4 @[top.scala 55:17]
    IF.io.ins_in <= inst_mem.io.inst @[top.scala 56:17]
    node _controler_io_opcod_T = bits(IF.io.ins_out, 6, 0) @[top.scala 59:38]
    controler.io.opcod <= _controler_io_opcod_T @[top.scala 59:23]
    reg_file.io.write <= Mem_wb.io.regWrite_out @[top.scala 60:22]
    node _reg_file_io_rs1_T = bits(IF.io.ins_out, 19, 15) @[top.scala 61:35]
    reg_file.io.rs1 <= _reg_file_io_rs1_T @[top.scala 61:20]
    node _reg_file_io_rs2_T = bits(IF.io.ins_out, 24, 20) @[top.scala 62:35]
    reg_file.io.rs2 <= _reg_file_io_rs2_T @[top.scala 62:20]
    imm.io.instr <= IF.io.ins_out @[top.scala 68:17]
    imm.io.pc_val <= IF.io.pc_out @[top.scala 69:18]
    alu_cnt.io.alu_op <= ID.io.aluOp_out @[top.scala 79:22]
    alu_cnt.io.func3 <= ID.io.func3_o @[top.scala 80:21]
    alu_cnt.io.func7 <= ID.io.func7_o @[top.scala 81:21]
    node _SD_io_rs1_sel_T = bits(IF.io.ins_out, 19, 15) @[top.scala 87:35]
    SD.io.rs1_sel <= _SD_io_rs1_sel_T @[top.scala 87:19]
    node _SD_io_rs2_sel_T = bits(IF.io.ins_out, 24, 20) @[top.scala 88:35]
    SD.io.rs2_sel <= _SD_io_rs2_sel_T @[top.scala 88:19]
    SD.io.MEM_WB_REGRD <= Mem_wb.io.rd_out @[top.scala 89:24]
    SD.io.MEM_WB_regWr <= Mem_wb.io.regWrite_out @[top.scala 90:24]
    node _T = eq(SD.io.fwd_rs1, UInt<1>("h01")) @[top.scala 94:24]
    when _T : @[top.scala 94:33]
      ID.io.operandA_in <= reg_file.io.WriteData @[top.scala 95:23]
      skip @[top.scala 94:33]
    else : @[top.scala 96:18]
      ID.io.operandA_in <= reg_file.io.rd1 @[top.scala 97:23]
      skip @[top.scala 96:18]
    node _T_1 = eq(SD.io.fwd_rs2, UInt<1>("h01")) @[top.scala 100:24]
    when _T_1 : @[top.scala 100:33]
      ID.io.operandB_in <= reg_file.io.WriteData @[top.scala 101:23]
      skip @[top.scala 100:33]
    else : @[top.scala 102:18]
      ID.io.operandB_in <= reg_file.io.rd2 @[top.scala 103:23]
      skip @[top.scala 102:18]
    HD.io.IF_ID_INST <= IF.io.ins_out @[top.scala 107:22]
    HD.io.ID_EX_MEMREAD <= ID.io.memRead_out @[top.scala 108:25]
    HD.io.ID_EX_REGRD <= ID.io.rd_out @[top.scala 109:23]
    node _HD_io_pc_in_T = asSInt(IF.io.pc4_out) @[top.scala 110:34]
    HD.io.pc_in <= _HD_io_pc_in_T @[top.scala 110:17]
    node _HD_io_current_pc_T = asSInt(IF.io.pc_out) @[top.scala 111:38]
    HD.io.current_pc <= _HD_io_current_pc_T @[top.scala 111:22]
    node _T_2 = eq(HD.io.ctrl_forward, UInt<1>("h01")) @[top.scala 114:29]
    when _T_2 : @[top.scala 114:41]
      ID.io.memWrite_in <= UInt<1>("h00") @[top.scala 115:27]
      ID.io.memRead_in <= UInt<1>("h00") @[top.scala 116:26]
      ID.io.br_en_in <= UInt<1>("h00") @[top.scala 117:24]
      ID.io.regWrite_in <= UInt<1>("h00") @[top.scala 118:27]
      ID.io.memToReg_in <= UInt<1>("h00") @[top.scala 119:27]
      ID.io.aluOp_in <= UInt<1>("h00") @[top.scala 120:24]
      ID.io.operandAsel_in <= UInt<1>("h00") @[top.scala 121:30]
      ID.io.operandBsel_in <= UInt<1>("h00") @[top.scala 122:30]
      ID.io.NextPc <= UInt<1>("h00") @[top.scala 123:22]
      skip @[top.scala 114:41]
    else : @[top.scala 125:14]
      ID.io.memWrite_in <= controler.io.memwrite @[top.scala 126:23]
      ID.io.memRead_in <= controler.io.memread @[top.scala 127:22]
      ID.io.br_en_in <= controler.io.branch @[top.scala 128:21]
      ID.io.regWrite_in <= controler.io.regwrite @[top.scala 129:23]
      ID.io.memToReg_in <= controler.io.memtoreg @[top.scala 130:23]
      ID.io.aluOp_in <= controler.io.aluop @[top.scala 131:19]
      ID.io.operandAsel_in <= controler.io.op_a @[top.scala 132:26]
      ID.io.operandBsel_in <= controler.io.op_b @[top.scala 133:26]
      ID.io.NextPc <= controler.io.next_pc @[top.scala 134:18]
      skip @[top.scala 125:14]
    BF.io.ID_EX_REGRD <= ID.io.rd_out @[top.scala 142:23]
    BF.io.ID_EX_MEMRD <= ID.io.memRead_out @[top.scala 143:23]
    BF.io.EX_MEM_REGRD <= EX.io.rd_out @[top.scala 144:24]
    BF.io.MEM_WB_REGRD <= Mem_wb.io.rd_out @[top.scala 145:24]
    BF.io.EX_MEM_MEMRD <= EX.io.memRead_out @[top.scala 146:24]
    BF.io.MEM_WB_MEMRD <= Mem_wb.io.MemRead_out @[top.scala 147:24]
    node _BF_io_rs1_sel_T = bits(IF.io.ins_out, 19, 15) @[top.scala 148:35]
    BF.io.rs1_sel <= _BF_io_rs1_sel_T @[top.scala 148:19]
    node _BF_io_rs2_sel_T = bits(IF.io.ins_out, 24, 20) @[top.scala 149:35]
    BF.io.rs2_sel <= _BF_io_rs2_sel_T @[top.scala 149:19]
    BF.io.ctrl_branch <= controler.io.branch @[top.scala 150:23]
    BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 153:18]
    BL.io.in_rs2 <= reg_file.io.rd2 @[top.scala 154:18]
    node _BL_io_in_func3_T = bits(IF.io.ins_out, 14, 12) @[top.scala 155:36]
    BL.io.in_func3 <= _BL_io_in_func3_T @[top.scala 155:20]
    node _Jalr_io_addr_T = asSInt(reg_file.io.rs1) @[top.scala 157:35]
    Jalr.io.addr <= _Jalr_io_addr_T @[top.scala 157:17]
    Jalr.io.pc_addr <= imm.io.i_imm @[top.scala 158:20]
    node _T_3 = eq(BF.io.forward_rs1, UInt<1>("h00")) @[top.scala 160:24]
    when _T_3 : @[top.scala 160:39]
      BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 162:16]
      Jalr.io.addr <= reg_file.io.rd1 @[top.scala 163:16]
      skip @[top.scala 160:39]
    else : @[top.scala 164:46]
      node _T_4 = eq(BF.io.forward_rs1, UInt<1>("h01")) @[top.scala 164:31]
      when _T_4 : @[top.scala 164:46]
        BL.io.in_rs1 <= alu.io.out @[top.scala 166:16]
        Jalr.io.addr <= reg_file.io.rd1 @[top.scala 167:15]
        skip @[top.scala 164:46]
      else : @[top.scala 168:46]
        node _T_5 = eq(BF.io.forward_rs1, UInt<2>("h02")) @[top.scala 168:31]
        when _T_5 : @[top.scala 168:46]
          BL.io.in_rs1 <= EX.io.aluOutput_out @[top.scala 170:16]
          Jalr.io.addr <= reg_file.io.rd1 @[top.scala 171:16]
          skip @[top.scala 168:46]
        else : @[top.scala 172:46]
          node _T_6 = eq(BF.io.forward_rs1, UInt<2>("h03")) @[top.scala 172:31]
          when _T_6 : @[top.scala 172:46]
            BL.io.in_rs1 <= reg_file.io.WriteData @[top.scala 174:16]
            Jalr.io.addr <= reg_file.io.rd1 @[top.scala 175:16]
            skip @[top.scala 172:46]
          else : @[top.scala 176:46]
            node _T_7 = eq(BF.io.forward_rs1, UInt<3>("h04")) @[top.scala 176:31]
            when _T_7 : @[top.scala 176:46]
              BL.io.in_rs1 <= data_mem.io.out @[top.scala 178:16]
              Jalr.io.addr <= reg_file.io.rd1 @[top.scala 179:16]
              skip @[top.scala 176:46]
            else : @[top.scala 180:46]
              node _T_8 = eq(BF.io.forward_rs1, UInt<3>("h05")) @[top.scala 180:31]
              when _T_8 : @[top.scala 180:46]
                BL.io.in_rs1 <= reg_file.io.WriteData @[top.scala 182:15]
                Jalr.io.addr <= reg_file.io.rd1 @[top.scala 183:16]
                skip @[top.scala 180:46]
              else : @[top.scala 184:45]
                node _T_9 = eq(BF.io.forward_rs1, UInt<3>("h06")) @[top.scala 184:30]
                when _T_9 : @[top.scala 184:45]
                  Jalr.io.addr <= alu.io.out @[top.scala 186:18]
                  BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 187:18]
                  skip @[top.scala 184:45]
                else : @[top.scala 188:46]
                  node _T_10 = eq(BF.io.forward_rs1, UInt<3>("h07")) @[top.scala 188:31]
                  when _T_10 : @[top.scala 188:46]
                    Jalr.io.addr <= EX.io.aluOutput_out @[top.scala 190:18]
                    BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 191:18]
                    skip @[top.scala 188:46]
                  else : @[top.scala 192:46]
                    node _T_11 = eq(BF.io.forward_rs1, UInt<4>("h08")) @[top.scala 192:31]
                    when _T_11 : @[top.scala 192:46]
                      Jalr.io.addr <= reg_file.io.WriteData @[top.scala 194:18]
                      BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 195:17]
                      skip @[top.scala 192:46]
                    else : @[top.scala 196:46]
                      node _T_12 = eq(BF.io.forward_rs1, UInt<4>("h09")) @[top.scala 196:31]
                      when _T_12 : @[top.scala 196:46]
                        Jalr.io.addr <= data_mem.io.out @[top.scala 198:18]
                        BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 199:18]
                        skip @[top.scala 196:46]
                      else : @[top.scala 200:46]
                        node _T_13 = eq(BF.io.forward_rs1, UInt<4>("h0a")) @[top.scala 200:31]
                        when _T_13 : @[top.scala 200:46]
                          Jalr.io.addr <= reg_file.io.WriteData @[top.scala 202:18]
                          BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 203:18]
                          skip @[top.scala 200:46]
                        else : @[top.scala 204:17]
                          BL.io.in_rs1 <= reg_file.io.rd1 @[top.scala 205:18]
                          Jalr.io.addr <= reg_file.io.rd1 @[top.scala 206:18]
                          skip @[top.scala 204:17]
    node _T_14 = eq(BF.io.forward_rs2, UInt<1>("h00")) @[top.scala 209:24]
    when _T_14 : @[top.scala 209:38]
      BL.io.in_rs2 <= reg_file.io.rd2 @[top.scala 211:17]
      skip @[top.scala 209:38]
    else : @[top.scala 212:45]
      node _T_15 = eq(BF.io.forward_rs2, UInt<1>("h01")) @[top.scala 212:31]
      when _T_15 : @[top.scala 212:45]
        BL.io.in_rs2 <= alu.io.out @[top.scala 214:17]
        skip @[top.scala 212:45]
      else : @[top.scala 215:45]
        node _T_16 = eq(BF.io.forward_rs2, UInt<2>("h02")) @[top.scala 215:31]
        when _T_16 : @[top.scala 215:45]
          BL.io.in_rs2 <= EX.io.aluOutput_out @[top.scala 217:17]
          skip @[top.scala 215:45]
        else : @[top.scala 218:45]
          node _T_17 = eq(BF.io.forward_rs2, UInt<2>("h03")) @[top.scala 218:31]
          when _T_17 : @[top.scala 218:45]
            BL.io.in_rs2 <= reg_file.io.WriteData @[top.scala 220:17]
            skip @[top.scala 218:45]
          else : @[top.scala 221:45]
            node _T_18 = eq(BF.io.forward_rs2, UInt<3>("h04")) @[top.scala 221:31]
            when _T_18 : @[top.scala 221:45]
              BL.io.in_rs2 <= data_mem.io.out @[top.scala 223:16]
              skip @[top.scala 221:45]
            else : @[top.scala 224:45]
              node _T_19 = eq(BF.io.forward_rs2, UInt<3>("h05")) @[top.scala 224:31]
              when _T_19 : @[top.scala 224:45]
                BL.io.in_rs2 <= reg_file.io.WriteData @[top.scala 226:17]
                skip @[top.scala 224:45]
              else : @[top.scala 228:14]
                BL.io.in_rs2 <= reg_file.io.rd2 @[top.scala 229:19]
                skip @[top.scala 228:14]
    ID.io.memWrite_in <= controler.io.memwrite @[top.scala 234:22]
    ID.io.memRead_in <= controler.io.memread @[top.scala 235:21]
    ID.io.memToReg_in <= controler.io.memtoreg @[top.scala 236:22]
    ID.io.regWrite_in <= controler.io.regwrite @[top.scala 237:22]
    ID.io.operandA_in <= reg_file.io.rd1 @[top.scala 238:22]
    ID.io.operandB_in <= reg_file.io.rd2 @[top.scala 239:22]
    node _ID_io_func3_T = bits(IF.io.ins_out, 14, 12) @[top.scala 240:31]
    ID.io.func3 <= _ID_io_func3_T @[top.scala 240:16]
    node _ID_io_func7_T = bits(IF.io.ins_out, 30, 30) @[top.scala 241:31]
    ID.io.func7 <= _ID_io_func7_T @[top.scala 241:16]
    ID.io.operandAsel_in <= controler.io.op_a @[top.scala 242:25]
    ID.io.operandBsel_in <= controler.io.op_b @[top.scala 243:25]
    ID.io.aluOp_in <= controler.io.aluop @[top.scala 244:24]
    ID.io.br_en_in <= controler.io.branch @[top.scala 245:24]
    ID.io.NextPc <= controler.io.next_pc @[top.scala 246:22]
    ID.io.pc_in <= IF.io.pc_out @[top.scala 248:16]
    ID.io.pc4_in <= IF.io.pc4_out @[top.scala 249:17]
    node _ID_io_rs1Ins_in_T = bits(IF.io.ins_out, 19, 15) @[top.scala 250:35]
    ID.io.rs1Ins_in <= _ID_io_rs1Ins_in_T @[top.scala 250:20]
    node _ID_io_rs2Ins_in_T = bits(IF.io.ins_out, 24, 20) @[top.scala 251:35]
    ID.io.rs2Ins_in <= _ID_io_rs2Ins_in_T @[top.scala 251:20]
    node _ID_io_rd_in_T = bits(IF.io.ins_out, 11, 7) @[top.scala 252:31]
    ID.io.rd_in <= _ID_io_rd_in_T @[top.scala 252:16]
    ID.io.operandA_in <= reg_file.io.rd1 @[top.scala 253:23]
    ID.io.operandB_in <= reg_file.io.rd2 @[top.scala 254:26]
    node _T_20 = eq(HD.io.inst_forward, UInt<1>("h01")) @[top.scala 256:29]
    when _T_20 : @[top.scala 256:41]
      IF.io.ins_in <= HD.io.inst_out @[top.scala 257:18]
      node _IF_io_pc_in_T = asUInt(HD.io.current_pc_out) @[top.scala 258:41]
      IF.io.pc_in <= _IF_io_pc_in_T @[top.scala 258:17]
      skip @[top.scala 256:41]
    else : @[top.scala 259:17]
      IF.io.ins_in <= inst_mem.io.inst @[top.scala 260:22]
      skip @[top.scala 259:17]
    node _T_21 = eq(HD.io.pc_forward, UInt<1>("h01")) @[top.scala 264:27]
    when _T_21 : @[top.scala 264:39]
      node _pc_io_addr_T = asUInt(HD.io.pc_out) @[top.scala 265:32]
      pc.io.addr <= _pc_io_addr_T @[top.scala 265:16]
      skip @[top.scala 264:39]
    else : @[top.scala 266:17]
      node _T_22 = eq(controler.io.next_pc, UInt<1>("h01")) @[top.scala 267:31]
      when _T_22 : @[top.scala 267:44]
        node _T_23 = eq(BL.io.output, UInt<1>("h01")) @[top.scala 268:25]
        node _T_24 = eq(controler.io.branch, UInt<1>("h01")) @[top.scala 268:56]
        node _T_25 = and(_T_23, _T_24) @[top.scala 268:33]
        when _T_25 : @[top.scala 268:65]
          node _pc_io_addr_T_1 = asUInt(imm.io.sb_imm) @[top.scala 269:37]
          pc.io.addr <= _pc_io_addr_T_1 @[top.scala 269:20]
          IF.io.pc_in <= UInt<1>("h00") @[top.scala 270:21]
          IF.io.pc4_in <= UInt<1>("h00") @[top.scala 271:22]
          IF.io.ins_in <= UInt<1>("h00") @[top.scala 272:22]
          skip @[top.scala 268:65]
        else : @[top.scala 273:19]
          pc.io.addr <= pc.io.pc_4 @[top.scala 274:20]
          skip @[top.scala 273:19]
        skip @[top.scala 267:44]
      else : @[top.scala 277:50]
        node _T_26 = eq(controler.io.next_pc, UInt<2>("h02")) @[top.scala 277:37]
        when _T_26 : @[top.scala 277:50]
          node _pc_io_addr_T_2 = asUInt(imm.io.uj_imm) @[top.scala 278:35]
          pc.io.addr <= _pc_io_addr_T_2 @[top.scala 278:18]
          IF.io.pc_in <= UInt<1>("h00") @[top.scala 279:19]
          IF.io.pc4_in <= UInt<1>("h00") @[top.scala 280:20]
          IF.io.ins_in <= UInt<1>("h00") @[top.scala 281:20]
          skip @[top.scala 277:50]
        else : @[top.scala 282:51]
          node _T_27 = eq(controler.io.next_pc, UInt<2>("h03")) @[top.scala 282:38]
          when _T_27 : @[top.scala 282:51]
            node _pc_io_addr_T_3 = asUInt(Jalr.io.out) @[top.scala 283:33]
            pc.io.addr <= _pc_io_addr_T_3 @[top.scala 283:18]
            IF.io.pc_in <= UInt<1>("h00") @[top.scala 284:19]
            IF.io.pc4_in <= UInt<1>("h00") @[top.scala 285:20]
            IF.io.ins_in <= UInt<1>("h00") @[top.scala 286:20]
            skip @[top.scala 282:51]
          else : @[top.scala 288:17]
            pc.io.addr <= pc.io.pc_4 @[top.scala 289:18]
            skip @[top.scala 288:17]
      skip @[top.scala 266:17]
    EX.io.aluOutput_in <= alu.io.out @[top.scala 297:23]
    EX.io.rd_in <= ID.io.rd_out @[top.scala 298:16]
    EX.io.rs2Sel_in <= ID.io.rs2Ins_out @[top.scala 299:20]
    EX.io.memToReg_in <= ID.io.memToReg_out @[top.scala 301:22]
    EX.io.regWrite_in <= ID.io.regWrite_out @[top.scala 302:27]
    EX.io.baseReg_in <= ID.io.operandA_out @[top.scala 303:26]
    EX.io.offSet_in <= ID.io.operandB_out @[top.scala 304:25]
    node _T_28 = eq(ID.io.operandAsel_out, UInt<2>("h02")) @[top.scala 309:31]
    when _T_28 : @[top.scala 309:44]
      node _alu_io_in1_T = asSInt(ID.io.pc4_out) @[top.scala 310:33]
      alu.io.in1 <= _alu_io_in1_T @[top.scala 310:16]
      skip @[top.scala 309:44]
    else : @[top.scala 311:15]
      node _T_29 = eq(Forward_U.io.forward_a, UInt<1>("h00")) @[top.scala 312:33]
      when _T_29 : @[top.scala 312:46]
        alu.io.in1 <= ID.io.operandA_out @[top.scala 313:17]
        skip @[top.scala 312:46]
      else : @[top.scala 314:53]
        node _T_30 = eq(Forward_U.io.forward_a, UInt<1>("h01")) @[top.scala 314:40]
        when _T_30 : @[top.scala 314:53]
          alu.io.in1 <= EX.io.aluOutput_out @[top.scala 315:17]
          skip @[top.scala 314:53]
        else : @[top.scala 316:53]
          node _T_31 = eq(Forward_U.io.forward_a, UInt<2>("h02")) @[top.scala 316:40]
          when _T_31 : @[top.scala 316:53]
            alu.io.in1 <= reg_file.io.WriteData @[top.scala 317:16]
            skip @[top.scala 316:53]
          else : @[top.scala 318:18]
            alu.io.in1 <= ID.io.operandA_out @[top.scala 319:17]
            skip @[top.scala 318:18]
      skip @[top.scala 311:15]
    node _T_32 = eq(controler.io.extend_sel, UInt<1>("h00")) @[top.scala 324:38]
    when _T_32 : @[top.scala 324:50]
      ID.io.imm <= imm.io.i_imm @[top.scala 325:28]
      skip @[top.scala 324:50]
    else : @[top.scala 326:56]
      node _T_33 = eq(controler.io.extend_sel, UInt<2>("h02")) @[top.scala 326:44]
      when _T_33 : @[top.scala 326:56]
        ID.io.imm <= imm.io.u_imm @[top.scala 327:28]
        skip @[top.scala 326:56]
      else : @[top.scala 328:56]
        node _T_34 = eq(controler.io.extend_sel, UInt<1>("h01")) @[top.scala 328:44]
        when _T_34 : @[top.scala 328:56]
          ID.io.imm <= imm.io.s_imm @[top.scala 329:28]
          skip @[top.scala 328:56]
        else : @[top.scala 330:20]
          ID.io.imm <= asSInt(UInt<1>("h00")) @[top.scala 331:28]
          skip @[top.scala 330:20]
    node _T_35 = eq(ID.io.operandBsel_out, UInt<1>("h01")) @[top.scala 335:31]
    when _T_35 : @[top.scala 335:38]
      alu.io.in2 <= ID.io.imm_out @[top.scala 336:19]
      node _T_36 = eq(Forward_U.io.forward_b, UInt<1>("h01")) @[top.scala 337:34]
      when _T_36 : @[top.scala 337:46]
        EX.io.offSet_in <= EX.io.aluOutput_out @[top.scala 337:63]
        skip @[top.scala 337:46]
      else : @[top.scala 338:52]
        node _T_37 = eq(Forward_U.io.forward_b, UInt<2>("h02")) @[top.scala 338:39]
        when _T_37 : @[top.scala 338:52]
          EX.io.offSet_in <= reg_file.io.WriteData @[top.scala 338:69]
          skip @[top.scala 338:52]
        else : @[top.scala 339:52]
          node _T_38 = eq(Forward_U.io.forward_b, UInt<1>("h00")) @[top.scala 339:39]
          when _T_38 : @[top.scala 339:52]
            EX.io.offSet_in <= ID.io.operandB_out @[top.scala 339:69]
            skip @[top.scala 339:52]
          else : @[top.scala 340:16]
            EX.io.offSet_in <= ID.io.operandB_out @[top.scala 341:21]
            skip @[top.scala 340:16]
      skip @[top.scala 335:38]
    else : @[top.scala 342:17]
      node _T_39 = eq(Forward_U.io.forward_b, UInt<1>("h00")) @[top.scala 343:33]
      when _T_39 : @[top.scala 343:46]
        alu.io.in2 <= ID.io.operandB_out @[top.scala 344:16]
        EX.io.offSet_in <= ID.io.operandB_out @[top.scala 345:21]
        skip @[top.scala 343:46]
      else : @[top.scala 346:51]
        node _T_40 = eq(Forward_U.io.forward_b, UInt<1>("h01")) @[top.scala 346:38]
        when _T_40 : @[top.scala 346:51]
          alu.io.in2 <= EX.io.aluOutput_out @[top.scala 347:16]
          EX.io.offSet_in <= EX.io.aluOutput_out @[top.scala 348:20]
          skip @[top.scala 346:51]
        else : @[top.scala 349:50]
          node _T_41 = eq(Forward_U.io.forward_b, UInt<2>("h02")) @[top.scala 349:37]
          when _T_41 : @[top.scala 349:50]
            alu.io.in2 <= reg_file.io.WriteData @[top.scala 350:16]
            EX.io.offSet_in <= reg_file.io.WriteData @[top.scala 351:21]
            skip @[top.scala 349:50]
          else : @[top.scala 352:15]
            alu.io.in2 <= ID.io.operandB_out @[top.scala 353:16]
            EX.io.offSet_in <= ID.io.operandB_out @[top.scala 354:21]
            skip @[top.scala 352:15]
      skip @[top.scala 342:17]
    alu.io.alu_Op <= alu_cnt.io.x @[top.scala 358:17]
    io.addr <= inst_mem.io.inst @[top.scala 362:12]
    EX.io.memWrite_in <= ID.io.memWrite_out @[top.scala 423:22]
    EX.io.memRead_in <= ID.io.memRead_out @[top.scala 424:21]
    node _data_mem_io_Addr_T = asUInt(EX.io.aluOutput_out) @[top.scala 426:43]
    data_mem.io.Addr <= _data_mem_io_Addr_T @[top.scala 426:21]
    data_mem.io.MemWrite <= EX.io.memWrite_out @[top.scala 427:25]
    data_mem.io.MemRead <= EX.io.memRead_out @[top.scala 428:24]
    data_mem.io.Data <= EX.io.offSet_out @[top.scala 429:21]
    Mem_wb.io.regWrite_in <= EX.io.regWrite_out @[top.scala 431:26]
    Mem_wb.io.baseReg_in <= EX.io.baseReg_out @[top.scala 433:25]
    Mem_wb.io.offSet_in <= EX.io.offSet_out @[top.scala 434:24]
    Mem_wb.io.rs2Sel_in <= EX.io.rs2Sel_out @[top.scala 435:24]
    Mem_wb.io.MemRead_in <= EX.io.memRead_out @[top.scala 438:25]
    Mem_wb.io.memToReg_in <= EX.io.memToReg_out @[top.scala 439:26]
    Mem_wb.io.memWrite_in <= EX.io.memWrite_out @[top.scala 440:26]
    Mem_wb.io.dataOut_in <= data_mem.io.out @[top.scala 441:25]
    Mem_wb.io.aluOutput_in <= EX.io.aluOutput_out @[top.scala 442:27]
    Mem_wb.io.rd_in <= EX.io.rd_out @[top.scala 443:20]
    node _reg_file_io_WriteData_T = eq(Mem_wb.io.memToReg_out, UInt<1>("h00")) @[top.scala 446:33]
    node _reg_file_io_WriteData_T_1 = eq(Mem_wb.io.memToReg_out, UInt<1>("h01")) @[top.scala 447:33]
    node _reg_file_io_WriteData_T_2 = mux(_reg_file_io_WriteData_T_1, Mem_wb.io.dataOut_out, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _reg_file_io_WriteData_T_3 = mux(_reg_file_io_WriteData_T, Mem_wb.io.aluOutput_out, _reg_file_io_WriteData_T_2) @[Mux.scala 98:16]
    reg_file.io.WriteData <= _reg_file_io_WriteData_T_3 @[top.scala 445:26]
    reg_file.io.write <= Mem_wb.io.regWrite_out @[top.scala 449:22]
    reg_file.io.rd <= Mem_wb.io.rd_out @[top.scala 450:19]
    
